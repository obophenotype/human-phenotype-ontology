{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation for Human Phenotype Ontology (HPO)","text":"<p>Human Phenotype Ontology (HPO) is an ontology used to describe human phenotypic abnormalities seen in genetic disorders and clinical research. It provides a structured representation of abnormal characteristics associated with diseases. HPO helps researchers and clinicians share and integrate phenotypic data, making understanding and diagnosing genetic disorders easier. It uses a hierarchical organization and semantic relationships between terms and allows for annotation of genes and diseases. HPO is used in multiple diagnosis and variant prioritization tools, aiding healthcare professionals and researchers in identifying and classifying genetic conditions. In 2023, HPO released an international edition which covers different languages such as Chinese, Turkish, Japanese, Spanish and Czech (more). The translations are displayed in the various browsers (e.g. HPO App and OLS).</p> <p>This site contains documentation for clinicians, researchers, developers, and other users of the HPO.</p>"},{"location":"#a-snapshot-of-the-hpo-hierarchy","title":"A snapshot of the HPO hierarchy","text":""},{"location":"#the-hpo-app","title":"The HPO App","text":"<p>To learn more, explore the HPO app.</p>"},{"location":"phenopackets/","title":"GA4GH Phenopackets","text":"<p>The Global Alliance for Genomics and Health (GA4GH) is a standards-setting organization that is developing a suite of coordinated standards for genomics. The GA4GH Phenopacket Schema is a standard for sharing disease and phenotype information that characterizes an individual person or biosample (Jacobsen et al., 2022).</p>"},{"location":"phenopackets/#introduction","title":"Introduction","text":"<p>The Phenopacket Schema is flexible and can represent clinical data for any kind of human disease including rare disease, complex disease, and cancer. It also allows consortia or databases to apply additional constraints to ensure uniform data collection for specific goals.</p> <p></p> Phenopacket schema overview. The GA4GH Phenopacket schema consists of several optional elements, each of which contains information about a certain topic, such as phenotype, variant, or pedigree. An element can contain other elements, which allows a hierarchical representation of data. For instance, Phenopacket contains elements of type Individual, PhenotypicFeature, Biosample, and so on. Individual elements can therefore be regarded as building blocks that are combined to create larger structures."},{"location":"phenopackets/#tutorial","title":"Tutorial","text":"<p>We have published a detailed example and tutorial for how to encode the clinical data of an individual with a Mendelian rare disease (retinoblastoma) in Ladewig et al. 2022.</p> <p>The schema is available on its GitHub repository in addition to detailed documentation.</p>"},{"location":"phenopackets/#phenopackets-and-hpo","title":"Phenopackets and HPO","text":"<p>The GA4GH Phenopacket Schema allows more context to be provided for phenotypic abnormalities than a list of HPO terms without additional data. For instance, we can specify the age of onset, the severity, the resolution (abatement, or \u201coffset\u201d) of a feature, other modifiers from the HPO\u2019s Clinical Modifier  subontology, and also provides a standard syntax for reporting that a particular feature was explicitly excluded by clinical examination.</p> <p></p> Overview of the PhenotypicFeature element of the GA4GH Phenopacket Schema..  <p>We have provided recommendations of how to encode clinical data with HPO terms that can be used as a guide to creating phenopackets for individuals with rare disease (Oien et al., 2019).</p>"},{"location":"phenopackets/#creating-phenopackets-phenopacketlab","title":"Creating Phenopackets: PhenopacketLab","text":"<p>PhenopacketLab is an Angular/Springboot web application for the loading, editing, saving of data that follows the Phenopacket Schema. PhenopacketLab is available on GitHub.</p>"},{"location":"phenopackets/#creating-phenopackets-for-developers","title":"Creating Phenopackets for developers","text":"<p>Phenopacket-tools is an open-source Java library and command-line application for construction, conversion, and validation of phenopackets. Phenopacket-tools simplifies construction of phenopackets by providing concise builders, programmatic shortcuts, and predefined building blocks (ontology classes) for concepts such as anatomical organs, age of onset, biospecimen type, and clinical modifiers. The phenopacket-tools library is freely available on GitHub. An article describing phenopacket-tools was published (Danis et al., 2023). A python package for working with phenopackets is generated directly from the Protobuf framework and is available on PyPI: phenopackets. A Rust crate is also available to build from the rust-build branch of the schema repository.</p> <p>The library pyphetools is intended to simplify the creation of phenopackets from tabular data or relational databases by providing a number of convenience functions and quality control measures.</p>"},{"location":"phenopackets/#phenopackets-on-fhir","title":"Phenopackets on FHIR","text":"<p>A Fast Healthcare Interoperability Resources (FHIR) Implementation Guide (IG) is being developed as a wy of working with phenopackets in electronic health record (EHR) settings: core-ig. The IG is being developed under the aegis of the HL7 Vulcan Accelerator program.</p>"},{"location":"phenopackets/#using-phenopackets-for-hpo-driven-genomic-diagnostics","title":"Using phenopackets for HPO-driven genomic diagnostics","text":"<p>Exomiser and LIRICAL are software packages for prioritizing variants and genes in the genomic diagnostics of rare Mendelian disease. Both packages have adopted the GA4GH Phenopacket Schema as an input format.</p>"},{"location":"annotations/genes_to_disease/","title":"genes_to_disease.txt","text":"<p>This file provides the disease to gene mappings that are used to create the phenotype.hpoa file.</p>"},{"location":"annotations/genes_to_disease/#file-format","title":"File format","text":"ncbi_gene_id gene_symbol association_type disease_id source NCBIGene:64170 CARD9 MENDELIAN OMIM:212050 ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/mim2gene_medgen NCBIGene:51256 TBC1D7 MENDELIAN OMIM:248000 ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/mim2gene_medgen NCBIGene:28981 IFT81 MENDELIAN OMIM:617895 ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/mim2gene_medgen NCBIGene:8216 LZTR1 MENDELIAN OMIM:616564 ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/mim2gene_medgen <p>The association types are:</p> <ul> <li>MENDELIAN</li> <li>POLYGENIC</li> <li>UNKNOWN</li> </ul>"},{"location":"annotations/genes_to_phenotype/","title":"genes_to_phenotype.txt","text":"<p>In the genes_to_phenotypes.txt file, we list for each gene the most specific HPO-classes (and not all the ancestors). The following table shows an excerpt from the file. The table provides the NCBI Gene identifier, the gene symbol, the HPO identifier and term name. If available, the frequency is shown. For instance, mutation in the AARS1 gene cause Leukoencephalopathy, hereditary diffuse, with spheroids 2. The frequency of the HPO term Sensory ataxia was annotated to be 1 in 2 because of information in Sundal C, et al., PMID:31775912 (See entry in table below). The HPO resource offers annotations made by the HPO team (using disease identifiers from OMIM) as well as annotations provided by the Orphanet team (using ORPHA disease identifiers). In this case, gene to phenotype annotations are shown separately.</p>"},{"location":"annotations/genes_to_phenotype/#file-format","title":"File format","text":"ncbi_gene_id gene_symbol hpo_id hpo_name frequency disease_id 10 NAT2 HP:0000007 Autosomal recessive inheritance - OMIM:243400 10 NAT2 HP:0001939 Abnormality of metabolism/homeostasis - OMIM:243400 16 AARS1 HP:0002460 Distal muscle weakness 15/15 OMIM:613287 16 AARS1 HP:0002451 Limb dystonia 3/3 OMIM:616339 16 AARS1 HP:0010871 Sensory ataxia 1/2 OMIM:619661 16 AARS1 HP:0009886 Trichorrhexis nodosa 1/2 OMIM:619691 16 AARS1 HP:0002421 Poor head control HP:0040283 ORPHA:442835 16 AARS1 HP:0001298 Encephalopathy HP:0040281 ORPHA:442835 16 AARS1 HP:0001290 Generalized hypotonia HP:0040282 ORPHA:442835 16 AARS1 HP:0001273 Abnormal corpus callosum morphology HP:0040283 ORPHA:442835 16 AARS1 HP:0001268 Mental deterioration HP:0040283 ORPHA:442835 16 AARS1 HP:0001268 Mental deterioration 2/2 OMIM:619661"},{"location":"annotations/introduction/","title":"HPO Annotation files","text":"<p>In addition to the ontology itself, we provide HPO annotations (HPOAs) of diseases. For instance, the disease Marfan syndrome is characterized by\u2014and therefore annotated to\u2014over 50 phenotypic abnormalities including Aortic aneurysm (each abnormality is represented by an HPO term). The annotations can have modifiers that describe the age of onset and the frequencies of features. For instance, the phenotypic abnormality Chiari malformation is rare in Loeys-Dietz syndrome 1 (4/30 according to a published study referenced in our data), but affects nearly 100% of patients diagnosed with most of the 446284 other diseases annotated to this term. The annotations include phenotypic abnormalities that are never present in a disease, and their absence can be leveraged in the differential diagnosis of diseases with overlapping clinical features. For instance, Ectopia lentis is not a characteristic of Loeys-Dietz syndrome 1 , whereas it is frequently observed in subjects with Marfan syndrome . The age of onset, frequency, and absence of the phenotypic features can be used by algorithms to weight findings in the context of clinical differential diagnosis.</p> <p>The annotation data of the HPO project is made available in the phenotype.hpoa file. We additionally provide three other files with summary-level information derived from the annotations.</p> <ul> <li>genes_to_phenotype.txt</li> <li>phenotype_to_genes.txt</li> <li>genes_to_disease.txt</li> </ul>"},{"location":"annotations/phenotype_hpoa/","title":"phenotype.hpoa","text":"<p>The HPO project provides a comprehensive set of computable definitions of rare diseases in the form of annotations which describe the clinical features (HPO terms) that characterize each disease. Each annotated feature can have metadata including its typical age of onset and the frequency. Ror instance, the HPO lists the frequency of Protrusio acetabuli  in persons with Marfan syndrome as 113/146 based on a published clinical study (PMID:26339165).</p> Field Item Required Example 1 database_id Yes MIM:154700, ORPHA:558 or MONDO:0007947 2 disease_name Yes Achondrogenesis, type IB 3 qualifier No NOT or empty 4 hpo_id Yes HP:0002487 5 reference Yes OMIM:154700 or PMID:15517394 6 evidence Yes TAS or PCS 7 onset No HP:0003577 8 frequency No HP:0003577 or 12/45 or 22% 9 sex No MALE or FEMALE 10 modifier No HP:0025257 11 aspect Yes \u2018P\u2019 or \u2018C\u2019 or \u2018I\u2019, 'H', or \u2018M\u2019 12 biocuration Yes HPO:skoehler[YYYY-MM-DD] <p>The file contains 12 tab-separated fields, some of which can be left empty. The \u2018Modifier\u2019 and \u2018BiocurationBy\u2019 fields can contain multiple items separated by semicolons. For instance, to indicate that a disease is characterized by a skin rash (HP:0000988) that is Recurrent (HP:0031796) and Triggered by cold (HP:0025206) one would annotate HP:0031796;HP:0025206 in the Modifier column. Many annotations go through multiple stages of biocuration. In this case, the individual biocuration events are also added as a semicolon-separated list.</p>"},{"location":"annotations/phenotype_hpoa/#1-database_id","title":"1. database_id","text":"<p>The disease identifier, such as MIM:154700, ORPHA:558 or MONDO:0007947  </p>"},{"location":"annotations/phenotype_hpoa/#2-disease_name","title":"2. disease_name","text":"<p>The corresponding name (label) of the disease in the corresponding database</p>"},{"location":"annotations/phenotype_hpoa/#3-qualifier","title":"3. qualifier","text":"<p>\"NOT\" or empty. We plan to obsolete this column and replace all such annotations with the precise frequencies. For instance, 0/19 would mean that in a study of 19 individuals, the phenotype in question was excluded in all 19.</p>"},{"location":"annotations/phenotype_hpoa/#4-hpo_id","title":"4. hpo_id","text":"<p>The HPO identifier (Note that the corresponding label needs to be looked up)</p>"},{"location":"annotations/phenotype_hpoa/#5-reference","title":"5. reference","text":"<p>A citation (usually PMID or OMIM) to support the annotation</p>"},{"location":"annotations/phenotype_hpoa/#6-evidence","title":"6. evidence","text":"<p>This required field indicates the level of evidence supporting the annotation. Annotations that have been extracted by parsing the Clinical Features sections of the omim.txt file are assigned the evidence code IEA (inferred from electronic annotation). Please note that you need to contact OMIM in order to reuse these annotations in other software products. Other codes include PCS for published clinical study. This should be used for information extracted from articles in the medical literature. Generally, annotations of this type will include the PubMed id of the published study in the DB_Reference field. Finally we have TAS, which stands for \u201ctraceable author statement\u201d, usually reviews or disease entries (e.g. OMIM) that only refers to the original publication.</p>"},{"location":"annotations/phenotype_hpoa/#7-onset","title":"7. onset","text":"<p>Age of onset of the phenotypic feature using terms from the Onset branch of the HPO</p>"},{"location":"annotations/phenotype_hpoa/#8-frequency","title":"8. frequency","text":"<p>There are three allowed options for this field. - A term-id from the HPO-sub-ontology below the term Frequency. - A count of patients affected within a cohort. For instance, 7/13 would indicate that 7 of the 13 patients with the specified disease were found to have the phenotypic abnormality referred to by the HPO term in question in the study referred to by the DB_Reference - A percentage value such as 17%, again referring to the percentage of patients found to have the phenotypic abnormality referred to by the HPO term in question in the study referred to by the DB_Reference. If possible, the 7/13 format is preferred over the percentage format if the exact data is available (Note: We are deprecating the use of percentages, and will disallow this type of annotation in the future).</p>"},{"location":"annotations/phenotype_hpoa/#9-sex","title":"9. sex","text":"<p>MALE or FEMALE  (for cases in which the annotation is sex-specific)</p>"},{"location":"annotations/phenotype_hpoa/#10-modifier","title":"10. modifier","text":"<p>One or more terms from the Clinical modifier  branch (semicolon-separated)</p>"},{"location":"annotations/phenotype_hpoa/#11-aspect","title":"11. aspect","text":"<p>This field denotes what part of the HPO hierarchy an annotation comes from. For use in semantic similarity analysis, some approaches use only terms that descend from Phenotypic abnormality and filter other annotations out.</p> <ul> <li>P:  Phenotypic abnormality (HP:0000118)</li> <li>C: Clinical course (HP:0031797)</li> <li>I: Mode of inheritance (HP:0000005)</li> <li>M: Clinical modifier (HP:0012823)</li> <li>H: Past medical history (HP:0032443)</li> </ul>"},{"location":"annotations/phenotype_hpoa/#12-biocuration","title":"12. biocuration","text":"<p>This refers to the center or user making the annotation and the date on which the annotation was made; format is YYYY-MM-DD this field is mandatory. Multiple entries can be separated by a semicolon if an annotation was revised, e.g., HPO:skoehler[YYYY-MM-DD] or HPO:skoehler[2010-04-21];HPO:lcarmody[2019-06-02]</p>"},{"location":"annotations/phenotype_to_genes/","title":"phenotype_to_genes.txt","text":"<p>The phenotype_to_genes.txt file displays  the HPO identifier and term name,  the NCBI Gene identifier, the gene symbol, and the disease identifier. This file shows each HPO term that has at least one gene associated with it. In contrast to the   genes_to_phenotypes.txt file, this file includes the ancestor classes of each associated phenotype. For example given that:</p> <ul> <li>HP_1 subclass_of HP_3</li> <li>HP_2 subclass_of HP_3</li> </ul> <p>and genes_to_phenotypes.txt contains:</p> <ul> <li>geneA annotated to HP_1</li> <li>geneB annotated to HP_2</li> </ul> <p>then phenotype_to_genes.txt contains:</p> <ul> <li>HP_3 annotated to geneA </li> <li>HP_3 annotated to geneB</li> </ul>"},{"location":"annotations/phenotype_to_genes/#file-format","title":"File format","text":"<p>Here is a sample of the file format.</p> hpo_id hpo_name ncbi_gene_id gene_symbol disease_id HP:0003300 Ovoid vertebral bodies 1280 COL2A1 OMIM:184255 HP:0003300 Ovoid vertebral bodies 1280 COL2A1 OMIM:271700 HP:0003300 Ovoid vertebral bodies 1280 COL2A1 OMIM:151210 HP:0003300 Ovoid vertebral bodies 1280 COL2A1 ORPHA: HP:0003300 Ovoid vertebral bodies 1280 COL2A1 OMIM:183900 HP:0003300 Ovoid vertebral bodies 1280 COL2A1 ORPHA:1856 HP:0003300 Ovoid vertebral bodies 2335 FN1 OMIM:184255 HP:0003300 Ovoid vertebral bodies 2335 FN1 ORPHA:93315 HP:0003300 Ovoid vertebral bodies 126792 B3GALT6 ORPHA:536467 HP:0003300 Ovoid vertebral bodies 126792 B3GALT6 OMIM:271640 HP:0003300 Ovoid vertebral bodies 4882 NPR2 OMIM:602875"},{"location":"community/","title":"HPO Community","text":"<p>The HPO has been a community project since its inception in 2008. We are indebted to all those who have made contributions of new terms, annotations, and other improvements. HPO is also the clinical flagship of the Monarch Initiative. Please see here for documentation about other activities of the Monarch Initiative.</p>"},{"location":"community/#organizational","title":"Organizational","text":""},{"location":"community/cite/","title":"How to cite the Human Phenotype Ontology (HPO)","text":"<p>Many publications have appeared that describe the HPO and its applications. To cite the HPO in general one can cite the original HPO paper or one of the regular Nucleic Acids Research Database articles. In general, we recommend citing the most recent article unless there is a specific reason to cite one of the earlier ones.</p> <p>Gargano MA, Matentzoglu N, Coleman B, Addo-Lartey EB, Anagnostopoulos AV, Anderton J, Avillach P, Bagley AM, Bak\u0161tein E, Balhoff JP, Baynam G, Bello SM, Berk M, Bertram H, Bishop S, Blau H, Bodenstein DF, Botas P, Boztug K, \u010cady J, Callahan TJ, Cameron R, Carbon SJ, Castellanos F, Caufield JH, Chan LE, Chute CG, Cruz-Rojo J, Dahan-Oliel N, Davids JR, de Dieuleveult M, de Souza V, de Vries BBA, de Vries E, DePaulo JR, Derfalvi B, Dhombres F, Diaz-Byrd C, Dingemans AJM, Donadille B, Duyzend M, Elfeky R, Essaid S, Fabrizzi C, Fico G, Firth HV, Freudenberg-Hua Y, Fullerton JM, Gabriel DL, Gilmour K, Giordano J, Goes FS, Moses RG, Green I, Griese M, Groza T, Gu W, Guthrie J, Gyori B, Hamosh A, Hanauer M, Hanu\u0161ov\u00e1 K, He YO, Hegde H, Helbig I, Holasov\u00e1 K, Hoyt CT, Huang S, Hurwitz E, Jacobsen JOB, Jiang X, Joseph L, Keramatian K, King B, Knoflach K, Koolen DA, Kraus ML, Kroll C, Kusters M, Ladewig MS, Lagorce D, Lai MC, Lapunzina P, Laraway B, Lewis-Smith D, Li X, Lucano C, Majd M, Marazita ML, Martinez-Glez V, McHenry TH, McInnis MG, McMurry JA, Mihulov\u00e1 M, Millett CE, Mitchell PB, Moslerov\u00e1 V, Narutomi K, Nematollahi S, Nevado J, Nierenberg AA, \u010cajbikov\u00e1 NN, Nurnberger JI Jr, Ogishima S, Olson D, Ortiz A, Pachajoa H, Perez de Nanclares G, Peters A, Putman T, Rapp CK, Rath A, Reese J, Rekerle L, Roberts AM, Roy S, Sanders SJ, Schuetz C, Schulte EC, Schulze TG, Schwarz M, Scott K, Seelow D, Seitz B, Shen Y, Similuk MN, Simon ES, Singh B, Smedley D, Smith CL, Smolinsky JT, Sperry S, Stafford E, Stefancsik R, Steinhaus R, Strawbridge R, Sundaramurthi JC, Talapova P, Tenorio Castano JA, Tesner P, Thomas RH, Thurm A, Turnovec M, van Gijn ME, Vasilevsky NA, Vl\u010dkov\u00e1 M, Walden A, Wang K, Wapner R, Ware JS, Wiafe AA, Wiafe SA, Wiggins LD, Williams AE, Wu C, Wyrwoll MJ, Xiong H, Yalin N, Yamamoto Y, Yatham LN, Yocum AK, Young AH, Y\u00fcksel Z, Zandi PP, Zankl A, Zarante I, Zvolsk\u00fd M, Toro S, Carmody LC, Harris NL, Munoz-Torres MC, Danis D, Mungall CJ, K\u00f6hler S, Haendel MA, Robinson PN The Human Phenotype Ontology in 2024 phenotypes around the world Nucleic Acids Res, 2023; 10.1093/nar/gkad1005:Epub ahead of print PMID:37953324</p> <p>K\u00f6hler S, Gargano M, Matentzoglu N, Carmody LC, Lewis-Smith D, Vasilevsky NA, Danis D, Balagura G, Baynam G, Brower AM, Callahan TJ, Chute CG, Est JL, Galer PD, Ganesan S, Griese M, Haimel M, Pazmandi J, Hanauer M, Harris NL, Hartnett MJ, Hastreiter M, Hauck F, He Y, Jeske T, Kearney H, Kindle G, Klein C, Knoflach K, Krause R, Lagorce D, McMurry JA, Miller JA, Munoz-Torres MC, Peters RL, Rapp CK, Rath AM, Rind SA, Rosenberg AZ, Segal MM, Seidel MG, Smedley D, Talmy T, Thomas Y, Wiafe SA, Xian J, Y\u00fcksel Z, Helbig I, Mungall CJ, Haendel MA, Robinson PN Robinson PN The Human Phenotype Ontology in 2021 Nucleic Acids Res, 2021; 49(D1):D1207-D1217 PMID:33264411</p> <p>K\u00f6hler S, Carmody L, Vasilevsky N, Jacobsen JOB, Danis D, Gourdine JP, Gargano M, Harris NL, Matentzoglu N, McMurry JA, Osumi-Sutherland D, Cipriani V, Balhoff JP, Conlin T, Blau H, Baynam G, Palmer R, Gratian D, Dawkins H, Segal M, Jansen AC, Muaz A, Chang WH, Bergerson J, Laulederkind SJF, Y\u00fcksel Z, Beltran S, Freeman AF, Sergouniotis PI, Durkin D, Storm AL, Hanauer M, Brudno M, Bello SM, Sincan M, Rageth K, Wheeler MT, Oegema R, Lourghi H, Della Rocca MG, Thompson R, Castellanos F, Priest J, Cunningham-Rundles C, Hegde A, Lovering RC, Hajek C, Olry A, Notarangelo L, Similuk M, Zhang XA, G\u00f3mez-Andr\u00e9s D, Lochm\u00fcller H, Dollfus H, Rosenzweig S, Marwaha S, Rath A, Sullivan K, Smith C, Milner JD, Leroux D, Boerkoel CF, Klion A, Carter MC, Groza T, Smedley D, Haendel MA, Mungall C, Robinson PN Expansion of the Human Phenotype Ontology (HPO) knowledge base and resources Nucleic Acids Res, 2019; 47:D1018\u2013D1027 PMID:30476213</p> <p>K\u00f6hler S, Vasilevsky NA, Engelstad M, Foster E, McMurry J, Aym\u00e9 S, Baynam G, Bello SM, Boerkoel CF, Boycott KM, Brudno M, Buske OJ, Chinnery PF, Cipriani V, Connell LE, Dawkins HJ, DeMare LE, Devereau AD, de Vries BB, Firth HV, Freson K, Greene D, Hamosh A, Helbig I, Hum C, J\u00e4hn JA, James R, Krause R, F Laulederkind SJ, Lochm\u00fcller H, Lyon GJ, Ogishima S, Olry A, Ouwehand WH, Pontikos N, Rath A, Schaefer F, Scott RH, Segal M, Sergouniotis PI, Sever R, Smith CL, Straub V, Thompson R, Turner C, Turro E, Veltman MW, Vulliamy T, Yu J, von Ziegenweidt J, Zankl A, Z\u00fcchner S, Zemojtel T, Jacobsen JO, Groza T, Smedley D, Mungall CJ, Haendel M, Robinson PN The Human Phenotype Ontology in 2017 Nucleic Acids Res, 2017; 45:D865-D876 PMID:27899602</p> <p>K\u00f6hler S, Doelken SC, Mungall CJ, Bauer S, Firth HV, Bailleul-Forestier I, Black GCM, Brown DL, Brudno M, Campbell J, FitzPatrick DR, Eppig JT, Jackson AP, Freson K, Girdea M, Helbig I, Hurst JA, J\u00e4hn J, Jackson LG, Kelly AM, Ledbetter DH, Mansour S, Martin CL, Moss C, Mumford A, Ouwehand WH, Park SM, Riggs ER, Scott RH, Sisodiya S, Van Vooren S, Wapner RJ, Wilkie AOM, Wright CF, Vulto-van Silfhout AT, de Leeuw N, de Vries BBA, Washingthon NL, Smith CL, Westerfield M, Schofield P, Ruef BJ, Gkoutos GV, Haendel M, Smedley D, Lewis SE, Robinson PN The Human Phenotype Ontology project linking molecular biology and disease through phenotype data Nucleic Acids Res, 2014; 42:D966-74 PMID:24217912</p> <p>Robinson PN, K\u00f6hler S, Bauer S, Seelow D, Horn D, Mundlos S The Human Phenotype Ontology A Tool for Annotating and Analyzing Human Hereditary Disease Am J Hum Genet, 2008; 83:610-615 PMID:18950739</p>"},{"location":"community/contributing/","title":"How to contribute to the Human Phenotype Ontology (HPO)","text":""},{"location":"community/contributing/#collaborating-with-hpo","title":"Collaborating with HPO","text":""},{"location":"community/contributing/#contributing","title":"Contributing","text":"<p>We welcome the participation of interested colleagues. We have been collaborating with many clinicians and translational researchers to refine and extend the HPO resources since 2009, and anticipate continuing this process for the foreseeable future. Groups or persons with expert knowledge in a particular domain of human phenotyping in a medical genetics setting are invited to contribute their knowledge on a collaborative basis.</p>"},{"location":"community/contributing/#new-term-requests","title":"New term requests","text":"<p>The simplest way to contribute to the HPO is to make a new term request on our issue tracker on Github. The following text is intended to serve as a guide for anyone who would like to contribute to the HPO project by making new term requests.</p>"},{"location":"community/contributing/#does-the-term-you-are-looking-for-already-exist","title":"Does the term you are looking for already exist?","text":"<p>First, please look at the current HPO and check whether the term is already there. Use the browser on this website.</p>"},{"location":"community/contributing/#is-the-term-you-are-looking-for-a-synonym-of-an-existing-term","title":"Is the term you are looking for a synonym of an existing term?","text":"<p>If you do not immediately find the term you are looking for, please look for synonyms. One way of doing this is to go to a likely parent of the term and peruse all of the children to spot a likely synonym. For instance, if you are looking for a term entitled Defect in the atrial septum and do not find it, go to the term Abnormal cardiac atrium morphology. and look through all of the children. With some luck you will find the term Atrial septal defect and recognize that Defect in the atrial septum is listed as a synonym of Atrial septal defect.</p>"},{"location":"community/contributing/#bundled-terms","title":"Bundled terms","text":"<p>If you find a description in a publication such as Sparse eyebrows and eyelashes, note that the description is referring to two separate phenotypic features. The HPO would encode this using two different terms, Sparse eyebrow and Sparse eyelashes. The idea is that one HPO term should refer to an atomic phenotypic abnormality rather than to a collection of abnormalities observed in an individual patient. Please debundle the description and proceed as described above. This is a central tenet of Deep phenotyping.</p>"},{"location":"community/contributing/#anatomy-of-a-good-term-suggestion","title":"Anatomy of a good term suggestion","text":"<p>A good term request provides the information shown in Table 1. Please use our GitHub issue tracker, choosing the \u201cNew Term\u201d template.</p> <p>Table 1. Components of a complete and well-structured new term request. | Item    | Example | | -------- | ------- | | Preferred term label  | Elevated D-dimers    | | Synonyms | Elevated D-dimer level     | | Definition    | An increased concentration of D-dimers, a marker of fibrin degradation, in the blood circulation. PMID:19008457    | | Comment | If appropriate, provide additional information or context to support the definition | | Parent term | Abnormality of fibrinolysis HP:0040224 (it is easiest to copy the link to this term from the HPO website). | Diseases characterized by this term | 2/2 individuals with Pseudo-TORCH syndrome 3 (OMIM:618886); PMID:31836668</p>"},{"location":"community/contributing/#how-to-suggest-new-disease-annotations","title":"How to suggest new disease annotations","text":"<p>We welcome suggestions for novel disease annotations (HPOAs) to add to HPO. These can be made by submitting a ticket to the HPO tracker with the information shown in Table 2. Please use our GitHub issue tracker, choosing the \u201cNew Annotation\u201d template.</p> <p>Table 2. Components of a complete and well-structured new disease annotation request.</p> Item Example Disease ID OMIM:265380 Disease Name Alveolar capillary dysplasia with misalignment of pulmonary veins 1 HPO ID HP:0001734 HPO Term Name Annular pancreas Frequency 2/14 Onset Congenital onset (use terms from the HPO Onset hierarchy) PMID PMID:19500772 Comment Any other information or context <p>Any other information or context</p>"},{"location":"community/contributing/#the-distinction-between-diseases-and-phenotypes","title":"The distinction between diseases and phenotypes","text":"<p>The community uses the word phenotype with multiple meanings. The HPO defines a disease as an entity that has all four of the following features:</p> <ul> <li>an etiology (whether identified or as yet unknown)</li> <li>a time course</li> <li>a set of phenotypic features</li> <li>if treatments exist, there is a characteristic response to them</li> </ul> <p>A phenotype (better: phenotypic feature) is a component of a disease. HPO terms can be used to describe the set of phenotypic features that characterize a disease. For instance, if the disease is the common cold, then the phenotypes would be runny nose, fever, cough, fatigue, etc. Therefore, in the following description:</p> <pre><code>a sepsis-like condition with intestinal pseudoobstruction, transient hypoglycemia,\ncholestatic hepatitis, and transient renal failure (maximum plasma creatinine\n132 \u03bcmol/L and urea 11 mmol/L at day 5 of life, which normalized on day 10).\n</code></pre> <p>We would conceptualize the \"sepsis-like condition\" as a disease, and would use HPO terms to describe</p> <ul> <li>Intestinal pseudo-obstruction</li> <li>Hypoglycemia with the modifier Transient.</li> <li>Cholestatic liver disease.</li> <li>Elevated serum creatinine.</li> <li>Increased blood urea nitrogen.</li> </ul> <p>Thus, the HPO considers a disease to be an entity that has a known or unknown cause, is characterized by one or more phenotypic features which can affect all or only a subset of individuals with the disease, a time course over which the phenotypic features may have onset and evolve, and in some cases one or more indicated treatments and a response to treatment. For instance, if the disease entity is the common cold, then the cause is a virus, the phenotypic features include fever, cough, runny nose, and fatigue, the time course usually is a relatively acute onset with manifestations dragging on for days to about a week, and the treatment may include bed rest, aspirin, or nasal sprays. In contrast, a phenotypic feature such as fever is a manifestation of many diseases. There is a grey zone between diseases and phenotypic features. For instance, diabetes mellitus can be conceptualized as a disease, but it is also a feature of other diseases such as Bardet Biedl syndrome. The HPO takes a practical stance and provides terms for such entities.</p>"},{"location":"community/contributing/#what-is-the-desired-level-of-granularity-of-an-hpo-term","title":"What is the desired level of granularity of an HPO term?","text":"<p>In general, each HPO term refers to a recognizable entity that occurs in multiple patients and often in multiple diseases. We do not try to create an HPO term for very specific manifestations in individual patients. For instance, hamartomatous proliferation containing malformed hair follicles in various stages of development would be too detailed to be a good HPO term.</p>"},{"location":"community/contributing/#anatomy-of-an-hpo-term","title":"Anatomy of an HPO term","text":"<p>Once you have convinced yourself that the item you need is not already present in the HPO, please provide us with the following information</p> <ul> <li>Preferred Label: What is the name of the term? This should be the name most commonly used by the community.</li> <li>Synonyms. If you are aware of synonyms for you term, please include them in your term request.</li> <li>Definition. Please try to formulate a definition of your term that will be comprehensible to non-specialists.</li> <li>References. Please include a PubMed ID if possible, so that other users of the HPO can find more informa stion about your term.</li> <li>Parent term. If possible, please suggest where your new term should be placed within the existing ontology. It is sufficient to write the name(s) of the parent term(s) (i.e., you do not need to tell us the HPO ID, e.g., HP:1234567).</li> </ul>"},{"location":"community/workshops/","title":"Workshops","text":"<p>Since its inception in 2008, the HPO has conducted numerous workshops  (\u201chackathons\u201d) with clinical experts to add content to the HPO for specific areas of medicine. Please contact the HPO team if you would like to work with us on HPO terms for an area of medicine.</p> <p>Participants in such workshops are invited to join the HPO team as coauthors in our regular database update articles (e.g., PMID:24217912, PMID:27899602, PMID:33264411, PMID:37953324). Additionally, some collaborative groups have published focussed aarticles about the work to which the HPO team has contributed. These many contributions (and many others not listed here) have enormously contributed to the quality of the HPO.</p> Date \u00a0Location \u00a0Topic Coordination 2009 \u00a0Sanger Institute, Hinxton, England General review (5 day workshop with multiple topics) Helen Firth, DECIPHER consortium 2012 Charit\u00e9 - Universit\u00e4tsmedizin Berlin, Germany 2-day workshop in Berlin, Germany, to extend dental terminology in the HPO Prof. Isabelle Bailleul-Forestier (Paul Sabatier University - Toulouse, France) 2012-2016 Work to add 80 terms and associated is-a relationships were added to HPO (See PMID:25949529) Abnormal bleeding BRIDGE BPD Consortium, Prof. Willem Ouwehand, University of Cambridge 2013 Charit\u00e9 - Universit\u00e4tsmedizin Berlin, Germany Epilepsy phenotypes and EEG abnormalities Prof. Ingo Helbig 2015 Cambridge, England Workshop with the UK's National Institute for Health Research (NIHR) Rare Disease\u2014Translational Research Collaboration (See PMID:27899602) Patrick Chinnery, Mareike Veltman and Roger James. 2017 National Institute for Allergy and Infectious Diseases (NIAID-NIH) Immunology Morgan Similuk 2017 Stanford University Cardiology\u00a0 Matthew Wheeler 2017 Mont St. Odile, France \u00a0Ophthalmology (See PMID:30626441 \u00a0Panagiotis Sergouniotis, European Reference Network for Rare Eye Diseases 2017-2024 Ongoing onsite and virtual workshops \u00a0Nephrology (see PMID:32939051 ) Kidney Precision Medicine Project  (KPMP) 2019-2021 Three workshops, numerous teleconferences, and joint task forces Inborn errors of immunity (IEI) ESID (European Society for Immunodeficiencies) 2017-2023 numerous teleconferences Pulmonology (See PMID:36588100) ChILD EU, Matthias Griese 2017 \u00a0numerous teleconferences Newborn screening (See PMID:33264411) \u00a0 Newborn Screening Translational Research Network (NBSTRN), Amy Brower"},{"location":"developers/documentation/","title":"Documentation","text":"<p>These pages are generated with mkdocs.</p> <p>To set things up, perform the following steps.</p> <pre><code>python3 -m venv venvhpoo\nsource venvhpo/bin/activate\npip install --upgrade pip\npip install mkdocs\npip install mkdocs-material\npip install mkdocs-material[imaging]\npip install pillow cairosvg\npip install mkdocs-material-extensions\npip install mkdocstrings[python]\n</code></pre> <p>To start a local server, enter: <pre><code>mkdocs serve\n</code></pre></p>"},{"location":"developers/mappings/","title":"Mappings","text":""},{"location":"developers/mappings/#hpo-mappings","title":"HPO Mappings","text":"<p>Last updated: 1st July 2024</p> Mapping Provider Format Description HP-MESH Monarch Initiative, initally provided by MedGen. SSSOM This mapping set is derived from MedGens MedGenIDMappings.txt file and distributed in SSSOM format. A discussion about the Mapping set can be read here HP-UMLS Monarch Initiative, initally provided by MedGen. SSSOM This mapping set is derived from MedGens MedGenIDMappings.txt file and distributed in SSSOM format. HP-MP (manually curated) Monarch Initiative, MGI, IMPC and others. SSSOM Mapping sets connected HP to MP terms curated manually by multiple organisations. HP-UPHENO Monarch Initiative SSSOM This mapping set is generated as part of the uPheno pipeline and links HPO terms with species-neutral phenotype terms in uPheno. <p>To let us know about other HP related mapping sets, please let us know on the HPO issue tracker.</p>"},{"location":"developers/release/","title":"HPO Editors guide for releases","text":"<p>There are two ways to run an HPO release:</p> <ol> <li>Run an HPO release using GitHub actions</li> <li>Run an HPO release manually (preferred)</li> </ol>"},{"location":"developers/release/#run-an-hpo-release-using-github-actions","title":"Run an HPO release using GitHub actions","text":"<p>EDIT: As of today (Wed 5 Oct, 2022), this does not work without passing a GitHub token into https://github.com/obophenotype/human-phenotype-ontology/blob/master/.github/workflows/deploy.yml, which permits access to the HPOA repo which is currently private.</p> <ol> <li>Go to the Deploy HPO Action</li> <li>Click on <code>Dispatch workflow</code> on the right to trigger the workflow. It will build HPO, HPOA and everything else related to the release</li> <li>When it is done, go to your pull requests and merge the release PR (ideally after QC is finished, although nothing QC worthy will have been touched)</li> <li>After merging, go to https://github.com/obophenotype/human-phenotype-ontology/releases. You should see a draft release. Fill in all relevant information as you see fit, then</li> <li>Hit <code>Publish release</code>.</li> </ol>"},{"location":"developers/release/#run-an-hpo-release-manually","title":"Run an HPO release manually:","text":"<ol> <li>Make sure all non-draft pull requests are merged.</li> <li>Locally switch to the <code>master</code> branch, and make sure it is up-to-date (<code>git pull</code>)</li> <li>Switch to <code>src/ontology</code> in terminal</li> <li>Run <code>sh build-without-imports.sh</code>. This will first build all HPO related files, then all HPOA related files</li> <li>Make a pull request with the newly generated files, merge when QC passes</li> <li>ALT1: On GitHub, create a new release manually (remember to set the correct tag, i.e. <code>v2022-10-30</code>, the rest is up to you). Attach all release files:<ul> <li>hp.owl</li> <li>hp.obo</li> <li>hp.json</li> <li>hp-base.owl</li> <li>hp-base.obo</li> <li>hp-base.json</li> <li>hp-full.owl</li> <li>hp-full.obo</li> <li>hp-full.json</li> <li>hp-simple-non-classified.owl</li> <li>hp-simple-non-classified.obo</li> <li>hp-simple-non-classified.json</li> <li>tmp/hpoa/phenotype.hpoa</li> <li>tmp/hpoa/genes_to_phenotype.txt</li> <li>tmp/hpoa/phenotype_annotation_negated.tab</li> <li>tmp/hpoa/phenotype_annotation.tab</li> <li>tmp/hpoa/phenotype_to_genes.txt</li> </ul> </li> <li>ALT2: If you have <code>gh</code> installed, you can use the following pipeline: <code>make public_release GHVERSION=v2022-10-05</code> (no <code>sh run.sh</code>!). This will automate the above step (6). When the draft release is successfully created, you should see a link in your console, like <code>https://github.com/obophenotype/human-phenotype-ontology/releases/tag/untagged-a230b72fb7457a460e79</code> (final line of output).  Go to this link with your browser. Edit the draft release in whatever way you wish. Usually you want to copy the contents from reports/difference_release_base.md into the description.</li> <li>Click on <code>Publish release</code>. </li> <li>Add to the release notes in github</li> <li>announce on hpo-mailing list (groups.io) - this is the most important part, where we have to take a bit of time to formulate the mail and align with Peter, Nicole, etc. (all the people that actively worked on hpo for this release)</li> <li>Announce on twitter (groups.io gives you a publicly available link the email from the previous step -&gt; use this)</li> <li>There is a repo called hpo-web-config () where we can add a \u201cnews item\u201d to the hpo-website (jax). Again, we use the link to the email of the hpo-mailing list (groups.io)</li> </ol>"},{"location":"developers/tools/","title":"Tools for working with HPO","text":"<p>TODO somewhat more detailed description of software for working with HPO</p>"},{"location":"developers/tools/#java","title":"Java","text":"<ul> <li>phenol is a Java library for working with JSON phenotype ontologies including especially the HPO and the Mammalian Phenotype Ontology and associated phenotype annotation files.</li> </ul>"},{"location":"developers/tools/#python","title":"Python","text":"<ul> <li>hpo-toolkit is a toolkit for working with HPO and HPO disease annotations in Python.</li> <li>OAK, the Ontology Access Kit, is a Python lib for common ontology operations over a variety of backends.</li> </ul>"},{"location":"developers/tools/#r","title":"R","text":"<ul> <li>HPOExplorer contains useful functions for working with the HPO. It allows you to create interactive phenotype network plots, as well as many other useful functions.</li> </ul>"},{"location":"documentation/FAQs/","title":"FAQs","text":"Am I allowed to change the contents of HPO? <p>The HPO is a community-driven project. We request that all proposed changes be suggested on our GitHub tracker  so that they will be of use to all users of the HPO.</p> What is the medical focus of the Human Phenotype Ontology? <p>The medical focus of the HPO in its initial decade (2007-2017) was on rare, mainly Mendelian diseases. The construction of the initial version of the HPO in 2007/2008 was performed by generating an ontology based on descriptions in the Clinical Synopsis of the Online Mendelian Inheritance in Man (OMIM) database. Since the initial publication of the HPO in 2008, the HPO team has held regular workshops with clinicians to refine and extend the clinical terminology of the HPO in specific areas such as cardiology or immunology. We have added textual definitions, computational logical definitions, and many thousands of new terms since then. The  HPO is currently being extended to other areas of medicine.</p> What is an ontology? <p>A terminology contains a list of items (often called \"terms\") that represent the concepts of a domain. An ontology is a terminology that additionally specifies formal semantic relationships of concepts. For instance, a terminology of wines would include a list of items such as Chardonnay, Cabernet Sauvignon, Rioja, Riesling, Sauvignon blanc, etc., but an ontology of wine might have a term for \"red wine\" and \"Rioja\"; It also can specify that \"Rioja\" is a type of \"red wine\". Ontologies and terminologies can be used as tools for standardizing and exchanging data. Ontologies such as the HPO typically enable sophisticated computational algorithms that exploit the semantic relations between terms.</p> How are the ontology terms structured? <p>Most ontologies are structured as directed acyclic graphs (DAG), which are similar to hierarchies but differ in that a more specialized term (child) can be related to more than one less specialized term (parent). Cycles (cyclic paths in the graph) are not allowed. The relationship of the terms of the HPO to one another is displayed in the DAG. For instance, the term Aplasia/Hypoplasia of metatarsal bones is a child of both Aplasia/Hypoplasia involving bones of the feet and Abnormal metatarsal morphology. The ability to encode multiple parents in a DAG adds to the flexibility and descriptiveness of the ontology. This would not be possible with a simple hierarchical system. The is-a relationship is transitive, meaning that annotations are inherited up all paths to the root. For instance, Abnormal morphology of the left ventricle is-a Abnormal cardiac ventricle morphology.</p> <p>Each term in the HPO describes a clinical abnormality. These may be general terms, such as Abnormal ear morphology or very specific ones such as Chorioretinal atrophy. The terms have a unique ID such as HP:0001140 and a label such as Epibulbar dermoid. Most terms have textual definitions such as An epibulbar dermoid is a benign tumor typically found at the junction of the cornea and sclera (limbal epibullar dermoid). The source of the definition must be indicated. Many terms have synonyms. For instance, Epibulbar dermoids is taken to be a synonym of Epibulbar dermoids.</p> How to collaborate with HPO? <p>We welcome the participation of interested colleagues. We anticipate that the structure of the HPO will continue to be refined and completed for some time to come. Groups or persons with expert knowledge in a particular domain of human phenotyping in a medical genetics setting are invited to contribute their knowledge on a collaborative basis.</p> <p>Issue Tracker</p> How to contribute translations? <p>The HPO Internationalization effort is a project coordinated by the HPO team and hosted on Github. Please see the translation documentation on how to collaborate. HPO Internationalization</p> How do I use HPO Annotations? <p>The terms of the HPO describe phenotypic abnormalities and do not directly describe diseases. Instead, the HPO project uses so-called annotations to describe the connection between diseases and HPO terms. For instance, the disease, Cutis laxa-Marfanoid syndrome is annotated by the HPO terms for Hip dislocation, Flexion contracture and many more.</p> <p>Annotation Documentation Page</p>"},{"location":"documentation/HPO_term_selection/","title":"How to choose HPO terms for data entry?","text":"<p>Please see K\u00f6hler S, et al. (2019) Encoding Clinical Data with the Human Phenotype Ontology for Computational Differential Diagnostics. Curr Protoc Hum Genet for a full introduction to this topic. In the following text, we provide a brief summary of how to choose HPO terms for an individual.</p> <p>HPO terms represent specific phenotypic observations of clinically abnormal features. Assuming that a physician or other professional is examining a patient (or a patient record) and has collected a comprehensive list of phenotypic abnormalities observed in the individual.</p>"},{"location":"documentation/HPO_term_selection/#choosing-specific-terms","title":"Choosing specific terms","text":"<p>For each phenotypic feature, choose the most specific HPO term possible, based on the definition and not simply based on the term label. Before selecting a term, examine any of the more specific terms contained underneath it (use the HPO browser  to search for terms and subterms). If any of those are appropriate, select the more specific term. You do not need to choose both a parent and child term.</p> <p>The more specific the item chosen, the better the specificity of the whole phenotypic profile. If there are no phenotypes in a given category, consider making a high level \"N\" (No) annotation. For example, if a full visual exam finds no visual impairment, then you could choose N-\"Visual impairment\". Choose terms that are thought to be pathological or unusual, even if they are not so in the greater populace. For example, Blue irides is a common phenotype in the population, but as an HPO annotation, it is intended to represent \"unusually\" blue irides given the population background of an affected individual, e.g., with Williams syndrome.</p>"},{"location":"documentation/HPO_term_selection/#observed-vs-excluded-terms","title":"Observed vs. excluded terms","text":"<p>Some HPO-based software allows users to annotations for manifestations that were investigated and specifically not observed (e.g., by clicking on a \u201cN\u201d/\"No\" button). These \"No\" annotations are especially useful to include in cases where there are only a few observable phenotypes.</p>"},{"location":"documentation/HPO_term_selection/#the-essential-role-of-clinical-judgement","title":"The (essential) role of clinical judgement","text":"<p>Clinicians should also use their judgment in entering terms. For instance, if a patient has severe myopia, this feature is more likely to be related to an underlying disease than if a patient was found to have a very mild degree of myopia (a feature which is extremely common in the population and may just be a coincidence).</p>"},{"location":"documentation/HPO_term_selection/#how-many-terms-should-i-enter","title":"How many terms should I enter?","text":"<p>Users of HPO software often ask how many terms they need to enter for HPO-based software to \"work\". It is difficult to provide a general answer to this question, but given that a medical record may contain up to hundreds of \"abnormal\" observations that would be difficult to enter by hand in software, some guidelines can be useful. We recommend that users enter HPO terms for all \"major\" phenotypic abnormalities, perhaps 5-7 in the first round. In some cases it may be advisable to enter higher level terms; for instance, in some forms of skeletal dysplasia, affected individuals may have several abnormalities of all or most phalanges. Although very specific HPO terms exist for these (e.g., Bullet-shaped middle phalanx of the 5th toe and so on for the other toes), it may be preferable to enter Bullet-shaped toe phalanx if many phalanges of the toes are affected. We recommend trying several combinations of phenotypes to get a good feeling for how term choice can affect the results.</p>"},{"location":"documentation/clinicians/","title":"Clinician's Guide","text":"<p>The Human Phenotype Ontology (HPO) project offers a variety of resources for working with the HPO. Several of the tools generate lists of diseases that best match a set of HPO terms (some of these tools additionally analyze lists of variants identified by exome or genome sequencing). The choice of terms made by clinicians or researchers using the tools can influence the output of the tools, and therefore, it is important to choose the terms well.</p>"},{"location":"documentation/clinicians/#how-does-the-hpo-define-phenotype","title":"How does the HPO define \"phenotype\"?","text":"<p>The word phenotype is used with many different meanings. In biology, the most widely accepted definition of phenotype is the observable traits of an organism. In medical contexts, however, the word phenotype is more often used to refer to some deviation from normal morphology, physiology, or behavior. Many phenotypic descriptions in medical publications describe the phenotype in imprecise ways. For instance, a description such as myopathic electromyography is used instead of describing the reasons for this diagnosis, which can include reduced duration and reduced amplitude of the action potentials, increased spontaneous activity with fibrillations, positive sharp waves, or a reduced number of motor units in the muscle. In contrast, deep phenotyping is defined as the precise and comprehensive analysis of phenotypic abnormalities in which the individual components of the phenotype are observed and described (See Deep Phenotyping for Precision Medicine). The HPO strives to provide a computational resource to enable deep phenotyping, and many of the HPO-based computational tools exploit deep phenotyping data.</p>"},{"location":"documentation/clinicians/#what-is-the-distinction-between-disease-and-phenotypic-feature","title":"What is the distinction between \"disease\" and \"phenotypic feature\"?","text":"<p>THe HPO considers a disease to be an entity that has a known or unknown cause, is characterized by one or more phenotypic features which can affect all or only a subset of individuals with the disease, a time course over which the phenotypic features may have onset and evolve, and in some cases one or more indicated treatments and a response to treatment. For instance, if the disease entity is the common cold, then the cause is a virus, the phenotypic features include fever, cough, runny nose, and fatigue, the time course usually is a relatively acute onset with manifestations dragging on for days to about a week, and the treatment may include bed rest, aspirin, or nasal sprays.</p> <p>In contrast, a phenotypic feature, such as fever, is a manifestation (component) of many diseases. HPO terms therefore do not describe disease entities, but rather the individual manifestations of the diseases.</p> <p>Occasionally, the distinction between diseases and phenotypic features is less clear. For instance, Diabetes mellitus can be conceptualized as a disease, but it is also a feature of other diseases such as Bardet Biedl syndrome. The HPO takes a practical stance and provides terms for such entities.</p> <p>To summarize, the  HPO defines a disease as an entity that has  of the following attributes:</p> <ul> <li>an etiology (whether identified or as yet unknown, idiopathic)</li> <li>a time course (can range from peracute \u2192 chronic)</li> <li>a set of phenotypic features that is the sum of all of the phenotypes manifested by an individual with the disease. A disease can be a feature of another disease (e.g. diabetes mellitus is a disease and is a feature of Bardet Biedl syndrome).</li> <li>if treatments exist, there is a characteristic response to them.</li> </ul>"},{"location":"documentation/clinicians/#how-to-choose-hpo-terms-for-data-entry","title":"How to choose HPO terms for data entry?","text":"<p>Please see the Term Selection page for details.</p>"},{"location":"documentation/overview/","title":"Documentation","text":"<ul> <li>Clinician's Guide</li> <li>Choosing HPO terms for data entry</li> <li>Documentation about HPO annotations</li> <li>Documentation about the GA4GH Phenopacket Schema and HPO</li> <li>Documentation for bioinformaticians, developers, and HPO editors</li> <li>Documentation about the HPO Community</li> <li>Frequently asked questions</li> </ul>"},{"location":"documentation/overview/#patient-health-information-disclaimer","title":"Patient Health Information Disclaimer","text":"<p>The HPO project offers a number of demonstration tools on the internet that intend to show prospective users how to run the tools and interpret the output. We note that in no case should Protected Health Information be transmitted to these tools across the internet. Instead, downloadable versions of these tools (such as the Exomiser) should be used behind appropriate firewalls.</p>"},{"location":"editors/protege/","title":"Protege: Guide for HPO developers","text":"<p>Protege  and hpo2robot  are used to edit the hp-edit.owl file, from which all other HPO ontology files are generated. This document summarizes how to set up Protege for editing. The instructions are intended for HPO team members and anybody who is interested in how we do our work. Most users of the HPO do not need to understand these steps.</p>"},{"location":"editors/protege/#protege-setup","title":"Protege setup","text":"<p>Download Protege (at least version 5.5) from the Protege download page .</p> <p>If you would like to use the reasoner, download and install the Elk plugin : Put the plugin into the Protege/plugins directory, see instructions below.</p>"},{"location":"editors/protege/#setting-your-id-ranges","title":"Setting your ID ranges","text":"<p>Do you have an ID range in the idranges file (hp-idranges.owl), in the src/ontology/ directory)? If not, Peter, Nicole, Chris or Melissa can add one for you.</p> <p>Ensure that you have Protege configured to generate new URIs in your own range. Note that if you edit multiple files, you need to check this every time to ensure that the proper settings are in place. HP URIs should look like this: http://purl.obolibrary.org/obo/HP_0000473 Do a test to ensure that the ID generator is working properly.</p> <p>A word of caution about protege auto-id functionality. Protege will allow reuse of a URI in your range according to the numbering scheme. It will keep track of what you did during last session, but does not check for use of the URI before assigning it (doh!!). Therefore, if you switched between editing another ontology, or added any IDs in your range prior to the switch to OWL, Protege will not know not to start from the beginning. Some tips below to check to see where you are in your range. Note: if you only edit the HPO and do not edit other ontologies, you will only need to set this up once, Protege will remember your last ID between sessions.</p> <p>Open the file hp-idranges.owl in src/ontology in a text editor (like TextEdit) and check your ID range (start and end). In Protege, go to the View menu, click \"render by entity IRI short name (Id)\". This will display classes as \"HP_0030021\" etc.</p> <p></p> Setting up ID Range. Set up Protege to show term IDs instead of labels.  <p>Use the search box to search for classes starting within your range, such as \"HP_04\" for Melissa's range. Check the \"show all results\" box to see all of your results.</p> <p></p> Setting up the ID Range. Find the highest previously used HPO id in your range   <p>Find the last used ID in your range, e.g. HP_0400008. Go to Protege-&gt;Preferences, and click the New Entities tab. Set Protege to the next unused ID in your range (e.g., \"HP_00400009\") rather than the beginning of the range.</p> <p></p> Setting up ID Range. Entering correct settings for the ID range in Protege.  <p>To do so (assuming you are using Protege 5), go to Protege-&gt;Preferences window and find the \"New Entities\" tab. The following settings are correct:</p> <ul> <li>Start with \"Specified URI\": http://purl.obolibrary.org/obo/</li> <li>Followed by \"/\"</li> <li>End with \"autogenerated ID\"</li> <li>Entity label \"custom label\": http://www.w3.org/2000/01/rdf-schema#label</li> <li>Autogenerated ID \"numeric\", prefix \"HP_\", digit count \"7\", start (nextunused ID in your range), end (last ID in your range)</li> <li>Finally, tick the box \"remember last ID between Protege sessions\"</li> </ul> <p>For instance, Melissa's range is 0400000-0409999</p> <p>Note that you can use ctrl-U to see the IRI of the current entity. If you click on \"show full IRI\", you should see something like this: http://purl.obolibrary.org/obo/HP_0011531.</p> <p>Protege should then remember your last used ID on the computer you are currently using for next time, though you should double check.</p> <p>(You can ignore this if you do not intend to create new classes)</p>"},{"location":"editors/protege/#new-entities-metadata","title":"New Entities Metadata","text":"<p>Finally, go to Protege-&gt;Preferences, \u201cNew Entities Metadata\u201d tab and set the following items. This will ensure that we are all using the same tag to get credit for making new terms.</p> <ul> <li>activate: <code>Annotate new entities with creator (user)</code>. </li> <li>Creator property: http://purl.org/dc/terms/creator</li> <li>Creator value: user ORCID (enter your ORCID id under User!)</li> <li>activate: <code>Annotate new entities with data/time</code>.</li> <li>Date property: http://purl.org/dc/elements/1.1/date</li> <li>Date value format: ISO-8601</li> </ul> <p></p> New entities metadata. Set up Protege to set up metadata for new entries."},{"location":"odk-workflows/","title":"Default ODK Workflows","text":"<ul> <li>Daily Editors Workflow</li> <li>Release Workflow</li> <li>Manage your ODK Repository</li> <li>Setting up Docker for ODK</li> <li>Imports management</li> <li>Managing the documentation</li> <li>Managing your Automated Testing</li> </ul>"},{"location":"odk-workflows/ContinuousIntegration/","title":"Introduction to Continuous Integration Workflows with ODK","text":"<p>Historically, most repos have been using Travis CI for continuous integration testing and building, but due to runtime restrictions, we recently switched a lot of our repos to GitHub actions. You can set up your repo with CI by adding  this to your configuration file (src/ontology/hp-odk.yaml):</p> <pre><code>ci:\n  - github_actions\n</code></pre> <p>When updateing your repo, you will notice a new file being added: <code>.github/workflows/qc.yml</code>.</p> <p>This file contains your CI logic, so if you need to change, or add anything, this is the place!</p> <p>Alternatively, if your repo is in GitLab instead of GitHub, you can set up your repo with GitLab CI by adding  this to your configuration file (src/ontology/hp-odk.yaml):</p> <pre><code>ci:\n  - gitlab-ci\n</code></pre> <p>This will add a file called <code>.gitlab-ci.yml</code> in the root of your repo.</p>"},{"location":"odk-workflows/EditorsWorkflow/","title":"Editors Workflow","text":"<p>The editors workflow is one of the formal workflows to ensure that the ontology is developed correctly according to ontology engineering principles. There are a few different editors workflows:</p> <ol> <li>Local editing workflow: Editing the ontology in your local environment by hand, using tools such as Prot\u00e9g\u00e9, ROBOT templates or DOSDP patterns.</li> <li>Completely automated data pipeline (GitHub Actions)</li> <li>DROID workflow</li> </ol> <p>This document only covers the first editing workflow, but more will be added in the future</p>"},{"location":"odk-workflows/EditorsWorkflow/#local-editing-workflow","title":"Local editing workflow","text":"<p>Workflow requirements:</p> <ul> <li>git</li> <li>github</li> <li>docker</li> <li>editing tool of choice, e.g. Prot\u00e9g\u00e9, your favourite text editor, etc</li> </ul>"},{"location":"odk-workflows/EditorsWorkflow/#1-create-issue","title":"1. Create issue","text":"<p>Ensure that there is a ticket on your issue tracker that describes the change you are about to make. While this seems optional, this is a very important part of the social contract of building an ontology - no change to the ontology should be performed without a good ticket, describing the motivation and nature of the intended change.</p>"},{"location":"odk-workflows/EditorsWorkflow/#2-update-main-branch","title":"2. Update main branch","text":"<p>In your local environment (e.g. your laptop), make sure you are on the <code>main</code> (prev. <code>master</code>) branch and ensure that you have all the upstream changes, for example:</p> <pre><code>git checkout master\ngit pull\n</code></pre>"},{"location":"odk-workflows/EditorsWorkflow/#3-create-feature-branch","title":"3. Create feature branch","text":"<p>Create a new branch. Per convention, we try to use meaningful branch names such as: - issue23removeprocess (where issue 23 is the related issue on GitHub) - issue26addcontributor - release20210101 (for releases)</p> <p>On your command line, this looks like this:</p> <pre><code>git checkout -b issue23removeprocess\n</code></pre>"},{"location":"odk-workflows/EditorsWorkflow/#4-perform-edit","title":"4. Perform edit","text":"<p>Using your editor of choice, perform the intended edit. For example:</p> <p>Prot\u00e9g\u00e9</p> <ol> <li>Open <code>src/ontology/hp-edit.owl</code> in Prot\u00e9g\u00e9</li> <li>Make the change</li> <li>Save the file</li> </ol> <p>TextEdit</p> <ol> <li>Open <code>src/ontology/hp-edit.owl</code> in TextEdit (or Sublime, Atom, Vim, Nano)</li> <li>Make the change</li> <li>Save the file</li> </ol> <p>Consider the following when making the edit.</p> <ol> <li>According to our development philosophy, the only places that should be manually edited are:<ul> <li><code>src/ontology/hp-edit.owl</code></li> <li>Any ROBOT templates you chose to use (the TSV files only)</li> <li>Any DOSDP data tables you chose to use (the TSV files, and potentially the associated patterns)</li> <li>components (anything in <code>src/ontology/components</code>), see here.</li> </ul> </li> <li>Imports should not be edited (any edits will be flushed out with the next update). However, refreshing imports is a potentially breaking change - and is discussed elsewhere.</li> <li>Changes should usually be small. Adding or changing 1 term is great. Adding or changing 10 related terms is ok. Adding or changing 100 or more terms at once should be considered very carefully.</li> </ol>"},{"location":"odk-workflows/EditorsWorkflow/#4-check-the-git-diff","title":"4. Check the Git diff","text":"<p>This step is very important. Rather than simply trusting your change had the intended effect, we should always use a git diff as a first pass for sanity checking.</p> <p>In our experience, having a visual git client like GitHub Desktop or sourcetree is really helpful for this part. In case you prefer the command line:</p> <pre><code>git status\ngit diff\n</code></pre>"},{"location":"odk-workflows/EditorsWorkflow/#5-quality-control","title":"5. Quality control","text":"<p>Now it's time to run your quality control checks. This can either happen locally (5a) or through your continuous integration system (7/5b).</p>"},{"location":"odk-workflows/EditorsWorkflow/#5a-local-testing","title":"5a. Local testing","text":"<p>If you chose to run your test locally:</p> <p><pre><code>sh run.sh make IMP=false test\n</code></pre> This will run the whole set of configured ODK tests on including your change. If you have a complex DOSDP pattern pipeline you may want to add <code>PAT=false</code> to skip the potentially lengthy process of rebuilding the patterns.</p> <pre><code>sh run.sh make IMP=false PAT=false test\n</code></pre>"},{"location":"odk-workflows/EditorsWorkflow/#6-pull-request","title":"6. Pull request","text":"<p>When you are happy with the changes, you commit your changes to your feature branch, push them upstream (to GitHub) and create a pull request. For example:</p> <pre><code>git add NAMEOFCHANGEDFILES\ngit commit -m \"Added biological process term #12\"\ngit push -u origin issue23removeprocess\n</code></pre> <p>Then you go to your project on GitHub, and create a new pull request from the branch, for example: https://github.com/INCATools/ontology-development-kit/pulls</p> <p>There is a lot of great advise on how to write pull requests, but at the very least you should: - mention the tickets affected: <code>see #23</code> to link to a related ticket, or <code>fixes #23</code> if, by merging this pull request, the ticket is fixed. Tickets in the latter case will be closed automatically by GitHub when the pull request is merged. - summarise the changes in a few sentences. Consider the reviewer: what would they want to know right away. - If the diff is large, provide instructions on how to review the pull request best (sometimes, there are many changed files, but only one important change).</p>"},{"location":"odk-workflows/EditorsWorkflow/#75b-continuous-integration-testing","title":"7/5b. Continuous Integration Testing","text":"<p>If you didn't run and local quality control checks (see 5a), you should have Continuous Integration (CI) set up, for example: - Travis - GitHub Actions</p> <p>More on how to set this up here. Once the pull request is created, the CI will automatically trigger. If all is fine, it will show up green, otherwise red.</p>"},{"location":"odk-workflows/EditorsWorkflow/#8-community-review","title":"8. Community review","text":"<p>Once all the automatic tests have passed, it is important to put a second set of eyes on the pull request. Ontologies are inherently social - as in that they represent some kind of community consensus on how a domain is organised conceptually. This seems high brow talk, but it is very important that as an ontology editor, you have your work validated by the community you are trying to serve (e.g. your colleagues, other contributors etc.). In our experience, it is hard to get more than one review on a pull request - two is great. You can set up GitHub branch protection to actually require a review before a pull request can be merged! We recommend this.</p> <p>This step seems daunting to some hopefully under-resourced ontologies, but we recommend to put this high up on your list of priorities - train a colleague, reach out!</p>"},{"location":"odk-workflows/EditorsWorkflow/#9-merge-and-cleanup","title":"9. Merge and cleanup","text":"<p>When the QC is green and the reviews are in (approvals), it is time to merge the pull request. After the pull request is merged, remember to delete the branch as well (this option will show up as a big button right after you have merged the pull request). If you have not done so, close all the associated tickets fixed by the pull request.</p>"},{"location":"odk-workflows/EditorsWorkflow/#10-changelog-optional","title":"10. Changelog (Optional)","text":"<p>It is sometimes difficult to keep track of changes made to an ontology. Some ontology teams opt to document changes in a changelog (simply a text file in your repository) so that when release day comes, you know everything you have changed. This is advisable at least for major changes (such as a new release system, a new pattern or template etc.).</p>"},{"location":"odk-workflows/ManageAutomatedTest/","title":"Managing your automated testing","text":""},{"location":"odk-workflows/ManageAutomatedTest/#constraint-violation-checks","title":"Constraint violation checks","text":"<p>We can define custom checks using SPARQL. SPARQL queries define bad modelling patterns (missing labels, misspelt URIs, and many more) in the ontology. If these queries return any results, then the build will fail. Custom checks are designed to be run as part of GitHub Actions Continuous Integration testing, but they can also run locally.</p>"},{"location":"odk-workflows/ManageAutomatedTest/#steps-to-add-a-constraint-violation-check","title":"Steps to add a constraint violation check:","text":"<ol> <li>Add the SPARQL query in <code>src/sparql</code>. The name of the file should end with <code>-violation.sparql</code>. Please give a name that helps to understand which violation the query wants to check.</li> <li>Add the name of the new file to odk configuration file <code>src/ontology/uberon-odk.yaml</code>:<ol> <li>Include the name of the file (without the <code>-violation.sparql</code> part) to the list inside the key <code>custom_sparql_checks</code> that is inside <code>robot_report</code> key.</li> <li> <p>If the <code>robot_report</code> or <code>custom_sparql_checks</code> keys are not available, please add this code block to the end of the file.</p> <p><pre><code>  robot_report:\n    release_reports: False\n    fail_on: ERROR\n    use_labels: False\n    custom_profile: True\n    report_on:\n      - edit\n    custom_sparql_checks:\n      - name-of-the-file-check\n</code></pre> 3. Update the repository so your new SPARQL check will be included in the QC.</p> </li> </ol> </li> </ol> <pre><code>sh run.sh make update_repo\n</code></pre>"},{"location":"odk-workflows/ManageDocumentation/","title":"Updating the Documentation","text":"<p>The documentation for HP is managed in two places (relative to the repository root):</p> <ol> <li>The <code>docs</code> directory contains all the files that pertain to the content of the documentation (more below)</li> <li>the <code>mkdocs.yaml</code> file contains the documentation config, in particular its navigation bar and theme.</li> </ol> <p>The documentation is hosted using GitHub pages, on a special branch of the repository (called <code>gh-pages</code>). It is important that this branch is never deleted - it contains all the files GitHub pages needs to render and deploy the site. It is also important to note that the gh-pages branch should never be edited manually. All changes to the docs happen inside the <code>docs</code> directory on the <code>main</code> branch.</p>"},{"location":"odk-workflows/ManageDocumentation/#editing-the-docs","title":"Editing the docs","text":""},{"location":"odk-workflows/ManageDocumentation/#changing-content","title":"Changing content","text":"<p>All the documentation is contained in the <code>docs</code> directory, and is managed in Markdown. Markdown is a very simple and convenient way to produce text documents with formatting instructions, and is very easy to learn - it is also used, for example, in GitHub issues. This is a normal editing workflow:</p> <ol> <li>Open the <code>.md</code> file you want to change in an editor of choice (a simple text editor is often best). IMPORTANT: Do not edit any files in the <code>docs/odk-workflows/</code> directory. These files are managed by the ODK system and will be overwritten when the repository is upgraded! If you wish to change these files, make an issue on the ODK issue tracker.</li> <li>Perform the edit and save the file</li> <li>Commit the file to a branch, and create a pull request as usual. </li> <li>If your development team likes your changes, merge the docs into master branch.</li> <li>Deploy the documentation (see below)</li> </ol>"},{"location":"odk-workflows/ManageDocumentation/#deploy-the-documentation","title":"Deploy the documentation","text":"<p>The documentation is not automatically updated from the Markdown, and needs to be deployed deliberately. To do this, perform the following steps:</p> <ol> <li>In your terminal, navigate to the edit directory of your ontology, e.g.:    <pre><code>cd hp/src/ontology\n</code></pre></li> <li>Now you are ready to build the docs as follows:    <pre><code>sh run.sh make update_docs\n</code></pre> Mkdocs now sets off to build the site from the markdown pages. You will be asked to<ul> <li>Enter your username</li> <li>Enter your password (see here for using GitHub access tokens instead)   IMPORTANT: Using password based authentication will be deprecated this year (2021). Make sure you read up on personal access tokens if that happens!</li> </ul> </li> </ol> <p>If everything was successful, you will see a message similar to this one:</p> <p><pre><code>INFO    -  Your documentation should shortly be available at: https://obophenotype.github.io/human-phenotype-ontology/ \n</code></pre> 3. Just to double check, you can now navigate to your documentation pages (usually https://obophenotype.github.io/human-phenotype-ontology/).     Just make sure you give GitHub 2-5 minutes to build the pages!</p>"},{"location":"odk-workflows/ReleaseWorkflow/","title":"The release workflow","text":"<p>The release workflow recommended by the ODK is based on GitHub releases and works as follows:</p> <ol> <li>Run a release with the ODK</li> <li>Review the release</li> <li>Merge to main branch</li> <li>Create a GitHub release</li> </ol> <p>These steps are outlined in detail in the following.</p>"},{"location":"odk-workflows/ReleaseWorkflow/#run-a-release-with-the-odk","title":"Run a release with the ODK","text":"<p>Preparation:</p> <ol> <li>Ensure that all your pull requests are merged into your main (master) branch</li> <li>Make sure that all changes to master are committed to GitHub (<code>git status</code> should say that there are no modified files)</li> <li>Locally make sure you have the latest changes from master (<code>git pull</code>)</li> <li>Checkout a new branch (e.g. <code>git checkout -b release-2021-01-01</code>)</li> <li>You may or may not want to refresh your imports as part of your release strategy (see here)</li> <li>Make sure you have the latest ODK installed by running <code>docker pull obolibrary/odkfull</code></li> </ol> <p>To actually run the release, you:</p> <ol> <li>Open a command line terminal window and navigate to the src/ontology directory (<code>cd hp/src/ontology</code>)</li> <li>Run release pipeline:<code>sh run.sh make prepare_release -B</code>. Note that for some ontologies, this process can take up to 90 minutes - especially if there are large ontologies you depend on, like PRO or CHEBI.</li> <li>If everything went well, you should see the following output on your machine: <code>Release files are now in ../.. - now you should commit, push and make a release on your git hosting site such as GitHub or GitLab</code>.</li> </ol> <p>This will create all the specified release targets (OBO, OWL, JSON, and the variants, ont-full and ont-base) and copy them into your release directory (the top level of your repo).</p>"},{"location":"odk-workflows/ReleaseWorkflow/#review-the-release","title":"Review the release","text":"<ol> <li>(Optional) Rough check. This step is frequently skipped, but for the more paranoid among us (like the author of this doc), this is a 3 minute additional effort for some peace of mind. Open the main release (hp.owl) in you favourite development environment (i.e. Prot\u00e9g\u00e9) and eyeball the hierarchy. We recommend two simple checks: <ol> <li>Does the very top level of the hierarchy look ok? This means that all new terms have been imported/updated correctly.</li> <li>Does at least one change that you know should be in this release appear? For example, a new class. This means that the release was actually based on the recent edit file. </li> </ol> </li> <li>Commit your changes to the branch and make a pull request</li> <li>In your GitHub pull request, review the following three files in detail (based on our experience):<ol> <li><code>hp.obo</code> - this reflects a useful subset of the whole ontology (everything that can be covered by OBO format). OBO format has that speaking for it: it is very easy to review!</li> <li><code>hp-base.owl</code> - this reflects the asserted axioms in your ontology that you have actually edited.</li> <li>Ideally also take a look at <code>hp-full.owl</code>, which may reveal interesting new inferences you did not know about. Note that the diff of this file is sometimes quite large.</li> </ol> </li> <li>Like with every pull request, we recommend to always employ a second set of eyes when reviewing a PR!</li> </ol>"},{"location":"odk-workflows/ReleaseWorkflow/#merge-the-main-branch","title":"Merge the main branch","text":"<p>Once your CI checks have passed, and your reviews are completed, you can now merge the branch into your main branch (don't forget to delete the branch afterwards - a big button will appear after the merge is finished).</p>"},{"location":"odk-workflows/ReleaseWorkflow/#create-a-github-release","title":"Create a GitHub release","text":"<ol> <li>Go to your releases page on GitHub by navigating to your repository, and then clicking on releases (usually on the right, for example: https://github.com/obophenotype/human-phenotype-ontology/releases). Then click \"Draft new release\"</li> <li>As the tag version you need to choose the date on which your ontologies were build. You can find this, for example, by looking at the <code>hp.obo</code> file and check the <code>data-version:</code> property. The date needs to be prefixed with a <code>v</code>, so, for example <code>v2020-02-06</code>.</li> <li>You can write whatever you want in the release title, but we typically write the date again. The description underneath should contain a concise list of changes or term additions.</li> <li>Click \"Publish release\". Done.</li> </ol>"},{"location":"odk-workflows/ReleaseWorkflow/#debugging-typical-ontology-release-problems","title":"Debugging typical ontology release problems","text":""},{"location":"odk-workflows/ReleaseWorkflow/#problems-with-memory","title":"Problems with memory","text":"<p>When you are dealing with large ontologies, you need a lot of memory. When you see error messages relating to large ontologies such as CHEBI, PRO, NCBITAXON, or Uberon, you should think of memory first, see here.</p>"},{"location":"odk-workflows/ReleaseWorkflow/#problems-when-using-obo-format-based-tools","title":"Problems when using OBO format based tools","text":"<p>Sometimes you will get cryptic error messages when using legacy tools using OBO format, such as the ontology release tool (OORT), which is also available as part of the ODK docker container. In these cases, you need to track down what axiom or annotation actually caused the breakdown. In our experience (in about 60% of the cases) the problem lies with duplicate annotations (<code>def</code>, <code>comment</code>) which are illegal in OBO. Here is an example recipe of how to deal with such a problem:</p> <ol> <li>If you get a message like <code>make: *** [cl.Makefile:84: oort] Error 255</code> you might have a OORT error. </li> <li>To debug this, in your terminal enter <code>sh run.sh make IMP=false PAT=false oort -B</code> (assuming you are already in the ontology folder in your directory) </li> <li>This should show you where the error is in the log (eg multiple different definitions)  WARNING: THE FIX BELOW IS NOT IDEAL, YOU SHOULD ALWAYS TRY TO FIX UPSTREAM IF POSSIBLE</li> <li>Open <code>hp-edit.owl</code> in Prot\u00e9g\u00e9 and find the offending term and delete all offending issue (e.g. delete ALL definition, if the problem was \"multiple def tags not allowed\") and save.  *While this is not idea, as it will remove all definitions from that term, it will be added back again when the term is fixed in the ontology it was imported from and added back in.</li> <li>Rerun <code>sh run.sh make IMP=false PAT=false oort -B</code> and if it all passes, commit your changes to a branch and make a pull request as usual.</li> </ol>"},{"location":"odk-workflows/RepoManagement/","title":"Managing your ODK repository","text":""},{"location":"odk-workflows/RepoManagement/#updating-your-odk-repository","title":"Updating your ODK repository","text":"<p>Your ODK repositories configuration is managed in <code>src/ontology/hp-odk.yaml</code>. The ODK Project Configuration Schema defines all possible parameters that can be used in this config YAML. Once you have made your changes, you can run the following to apply your changes to the repository:</p> <pre><code>sh run.sh make update_repo\n</code></pre> <p>There are a large number of options that can be set to configure your ODK, but we will only discuss a few of them here.</p> <p>NOTE for Windows users:</p> <p>You may get a cryptic failure such as <code>Set Illegal Option -</code> if the update script located in <code>src/scripts/update_repo.sh</code>  was saved using Windows Line endings. These need to change to unix line endings. In Notepad++, for example, you can  click on Edit-&gt;EOL Conversion-&gt;Unix LF to change this.</p>"},{"location":"odk-workflows/RepoManagement/#managing-imports","title":"Managing imports","text":"<p>You can use the update repository workflow described on this page to perform the following operations to your imports:</p> <ol> <li>Add a new import</li> <li>Modify an existing import</li> <li>Remove an import you no longer want</li> <li>Customise an import</li> </ol> <p>We will discuss all these workflows in the following.</p>"},{"location":"odk-workflows/RepoManagement/#add-new-import","title":"Add new import","text":"<p>To add a new import, you first edit your odk config as described above, adding an <code>id</code> to the <code>product</code> list in the <code>import_group</code> section (for the sake of this example, we assume you already import RO, and your goal is to also import GO):</p> <pre><code>import_group:\n  products:\n    - id: ro\n    - id: go\n</code></pre> <p>Note: our ODK file should only have one <code>import_group</code> which can contain multiple imports (in the <code>products</code> section). Next, you run the update repo workflow to apply these changes. Note that by default, this module is going to be a SLME Bottom module, see here. To change that or customise your module, see section \"Customise an import\". To finalise the addition of your import, perform the following steps:</p> <ol> <li>Add an import statement to your <code>src/ontology/hp-edit.owl</code> file. We suggest to do this using a text editor, by simply copying an existing import declaration and renaming it to the new ontology import, for example as follows:     <pre><code>...\nOntology(&lt;http://purl.obolibrary.org/obo/hp.owl&gt;\nImport(&lt;http://purl.obolibrary.org/obo/hp/imports/ro_import.owl&gt;)\nImport(&lt;http://purl.obolibrary.org/obo/hp/imports/go_import.owl&gt;)\n...\n</code></pre></li> <li>Add your imports redirect to your catalog file <code>src/ontology/catalog-v001.xml</code>, for example:     <pre><code>&lt;uri name=\"http://purl.obolibrary.org/obo/hp/imports/go_import.owl\" uri=\"imports/go_import.owl\"/&gt;\n</code></pre></li> <li>Test whether everything is in order:<ol> <li>Refresh your import</li> <li>Open in your Ontology Editor of choice (Protege) and ensure that the expected terms are imported.</li> </ol> </li> </ol> <p>Note: The catalog file <code>src/ontology/catalog-v001.xml</code> has one purpose: redirecting  imports from URLs to local files. For example, if you have</p> <pre><code>Import(&lt;http://purl.obolibrary.org/obo/hp/imports/go_import.owl&gt;)\n</code></pre> <p>in your editors file (the ontology) and</p> <pre><code>&lt;uri name=\"http://purl.obolibrary.org/obo/hp/imports/go_import.owl\" uri=\"imports/go_import.owl\"/&gt;\n</code></pre> <p>in your catalog, tools like <code>robot</code> or Prot\u00e9g\u00e9 will recognize the statement in the catalog file to redirect the URL <code>http://purl.obolibrary.org/obo/hp/imports/go_import.owl</code> to the local file <code>imports/go_import.owl</code> (which is in your <code>src/ontology</code> directory).</p>"},{"location":"odk-workflows/RepoManagement/#modify-an-existing-import","title":"Modify an existing import","text":"<p>If you simply wish to refresh your import in light of new terms, see here. If you wish to change the type of your module see section \"Customise an import\".</p>"},{"location":"odk-workflows/RepoManagement/#remove-an-existing-import","title":"Remove an existing import","text":"<p>To remove an existing import, perform the following steps:</p> <ol> <li>remove the import declaration from your <code>src/ontology/hp-edit.owl</code>.</li> <li>remove the id from your <code>src/ontology/hp-odk.yaml</code>, eg. <code>- id: go</code> from the list of <code>products</code> in the <code>import_group</code>.</li> <li>run update repo workflow</li> <li>delete the associated files manually:<ul> <li><code>src/imports/go_import.owl</code></li> <li><code>src/imports/go_terms.txt</code></li> </ul> </li> <li>Remove the respective entry from the <code>src/ontology/catalog-v001.xml</code> file.</li> </ol>"},{"location":"odk-workflows/RepoManagement/#customise-an-import","title":"Customise an import","text":"<p>By default, an import module extracted from a source ontology will be a SLME module, see here. There are various options to change the default.</p> <p>The following change to your repo config (<code>src/ontology/hp-odk.yaml</code>) will switch the go import from an SLME module to a simple ROBOT filter module:</p> <pre><code>import_group:\n  products:\n    - id: ro\n    - id: go\n      module_type: filter\n</code></pre> <p>A ROBOT filter module is, essentially, importing all external terms declared by your ontology (see here on how to declare external terms to be imported). Note that the <code>filter</code> module does  not consider terms/annotations from namespaces other than the base-namespace of the ontology itself. For example, in the example of GO above, only annotations / axioms related to the GO base IRI (http://purl.obolibrary.org/obo/GO_) would be considered. This  behaviour can be changed by adding additional base IRIs as follows:</p> <pre><code>import_group:\n  products:\n    - id: go\n      module_type: filter\n      base_iris:\n        - http://purl.obolibrary.org/obo/GO_\n        - http://purl.obolibrary.org/obo/CL_\n        - http://purl.obolibrary.org/obo/BFO\n</code></pre> <p>If you wish to customise your import entirely, you can specify your own ROBOT command to do so. To do that, add the following to your repo config (<code>src/ontology/hp-odk.yaml</code>):</p> <pre><code>import_group:\n  products:\n    - id: ro\n    - id: go\n      module_type: custom\n</code></pre> <p>Now add a new goal in your custom Makefile (<code>src/ontology/hp.Makefile</code>, not <code>src/ontology/Makefile</code>).</p> <pre><code>imports/go_import.owl: mirror/ro.owl imports/ro_terms_combined.txt\n    if [ $(IMP) = true ]; then $(ROBOT) query  -i $&lt; --update ../sparql/preprocess-module.ru \\\n        extract -T imports/ro_terms_combined.txt --force true --individuals exclude --method BOT \\\n        query --update ../sparql/inject-subset-declaration.ru --update ../sparql/postprocess-module.ru \\\n        annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) --output $@.tmp.owl &amp;&amp; mv $@.tmp.owl $@; fi\n</code></pre> <p>Now feel free to change this goal to do whatever you wish it to do! It probably makes some sense (albeit not being a strict necessity), to leave most of the goal instead and replace only:</p> <pre><code>extract -T imports/ro_terms_combined.txt --force true --individuals exclude --method BOT \\\n</code></pre> <p>to another ROBOT pipeline.</p>"},{"location":"odk-workflows/RepoManagement/#add-a-component","title":"Add a component","text":"<p>A component is an import which belongs to your ontology, e.g. is managed by  you and your team. </p> <ol> <li>Open <code>src/ontology/hp-odk.yaml</code></li> <li>If you dont have it yet, add a new top level section <code>components</code></li> <li>Under the <code>components</code> section, add a new section called <code>products</code>.  This is where all your components are specified</li> <li>Under the <code>products</code> section, add a new component, e.g. <code>- filename: mycomp.owl</code></li> </ol> <p>Example</p> <pre><code>components:\n  products:\n    - filename: mycomp.owl\n</code></pre> <p>When running <code>sh run.sh make update_repo</code>, a new file <code>src/ontology/components/mycomp.owl</code> will  be created which you can edit as you see fit. Typical ways to edit:</p> <ol> <li>Using a ROBOT template to generate the component (see below)</li> <li>Manually curating the component separately with Prot\u00e9g\u00e9 or any other editor</li> <li>Providing a <code>components/mycomp.owl:</code> make target in <code>src/ontology/hp.Makefile</code> and provide a custom command to generate the component<ul> <li><code>WARNING</code>: Note that the custom rule to generate the component MUST NOT depend on any other ODK-generated file such as seed files and the like (see issue).</li> </ul> </li> <li>Providing an additional attribute for the component in <code>src/ontology/hp-odk.yaml</code>, <code>source</code>, to specify that this component should simply be downloaded from somewhere on the web.</li> </ol>"},{"location":"odk-workflows/RepoManagement/#adding-a-new-component-based-on-a-robot-template","title":"Adding a new component based on a ROBOT template","text":"<p>Since ODK 1.3.2, it is possible to simply link a ROBOT template to a component without having to specify any of the import logic. In order to add a new component that is connected to one or more template files, follow these steps:</p> <ol> <li>Open <code>src/ontology/hp-odk.yaml</code>.</li> <li>Make sure that <code>use_templates: TRUE</code> is set in the global project options. You should also make sure that <code>use_context: TRUE</code> is set in case you are using prefixes in your templates that are not known to <code>robot</code>, such as <code>OMOP:</code>, <code>CPONT:</code> and more. All non-standard prefixes you are using should be added to <code>config/context.json</code>.</li> <li>Add another component to the <code>products</code> section.</li> <li>To activate this component to be template-driven, simply say: <code>use_template: TRUE</code>. This will create an empty template for you in the templates directory, which will automatically be processed when recreating the component (e.g. <code>run.bat make recreate-mycomp</code>).</li> <li>If you want to use more than one component, use the <code>templates</code> field to add as many template names as you wish. ODK will look for them in the <code>src/templates</code> directory.</li> <li>Advanced: If you want to provide additional processing options, you can use the <code>template_options</code> field. This should be a string with option from robot template. One typical example for additional options you may want to provide is <code>--add-prefixes config/context.json</code> to ensure the prefix map of your context is provided to <code>robot</code>, see above.</li> </ol> <p>Example:</p> <pre><code>components:\n  products:\n    - filename: mycomp.owl\n      use_template: TRUE\n      template_options: --add-prefixes config/context.json\n      templates:\n        - template1.tsv\n        - template2.tsv\n</code></pre> <p>Note: if your mirror is particularly large and complex, read this ODK recommendation.</p>"},{"location":"odk-workflows/RepositoryFileStructure/","title":"Repository structure","text":"<p>The main kinds of files in the repository:</p> <ol> <li>Release files</li> <li>Imports</li> <li>Components</li> </ol>"},{"location":"odk-workflows/RepositoryFileStructure/#release-files","title":"Release files","text":"<p>Release file are the file that are considered part of the official ontology release and to be used by the community. A detailed description of the release artefacts can be found here.</p>"},{"location":"odk-workflows/RepositoryFileStructure/#imports","title":"Imports","text":"<p>Imports are subsets of external ontologies that contain terms and axioms you would like to re-use in your ontology. These are considered \"external\", like dependencies in software development, and are not included in your \"base\" product, which is the release artefact which contains only those axioms that you personally maintain.</p> <p>These are the current imports in HP</p> Import URL Type nbo http://purl.obolibrary.org/obo/nbo.owl slme pr https://raw.githubusercontent.com/obophenotype/pro_obo_slim/master/pr_slim.owl slme go http://purl.obolibrary.org/obo/go.owl slme uberon http://purl.obolibrary.org/obo/uberon.owl slme ro http://purl.obolibrary.org/obo/ro.owl slme chebi https://raw.githubusercontent.com/obophenotype/chebi_obo_slim/main/chebi_slim.owl slme hsapdv http://purl.obolibrary.org/obo/hsapdv.owl slme pato http://purl.obolibrary.org/obo/pato.owl slme cl http://purl.obolibrary.org/obo/cl.owl slme mpath http://purl.obolibrary.org/obo/mpath.owl slme ## Components Components, in contrast to imports, are considered full members of the ontology. This means that any axiom in a component is also included in the ontology base - which means it is considered native to the ontology. While this sounds complicated, consider this: conceptually, no component should be part of more than one ontology. If that seems to be the case, we are most likely talking about an import. Components are often not needed for ontologies, but there are some use cases: <ol> <li>There is an automated process that generates and re-generates a part of the ontology</li> <li>A part of the ontology is managed in ROBOT templates</li> <li>The expressivity of the component is higher than the format of the edit file. For example, people still choose to manage their ontology in OBO format (they should not) missing out on a lot of owl features. They may choose to manage logic that is beyond OBO in a specific OWL component.</li> </ol>"},{"location":"odk-workflows/SettingUpDockerForODK/","title":"Setting up your Docker environment for ODK use","text":"<p>One of the most frequent problems with running the ODK for the first time is failure because of lack of memory. This can look like a Java OutOfMemory exception,  but more often than not it will appear as something like an <code>Error 137</code>. There are two places you need to consider to set your memory:</p> <ol> <li>Your src/ontology/run.sh (or run.bat) file. You can set the memory in there by adding  <code>robot_java_args: '-Xmx8G'</code> to your src/ontology/hp-odk.yaml file, see for example here.</li> <li>Set your docker memory. By default, it should be about 10-20% more than your <code>robot_java_args</code> variable. You can manage your memory settings by right-clicking on the docker whale in your system bar--&gt;Preferences--&gt;Resources--&gt;Advanced, see picture below.</li> </ol> <p></p>"},{"location":"odk-workflows/UpdateImports/","title":"Update Imports Workflow","text":"<p>This page discusses how to update the contents of your imports, like adding or removing terms. If you are looking to customise imports, like changing the module type, see here.</p>"},{"location":"odk-workflows/UpdateImports/#importing-a-new-term","title":"Importing a new term","text":"<p>Note: some ontologies now use a merged-import system to manage dynamic imports, for these please follow instructions in the section title \"Using the Base Module approach\".</p> <p>Importing a new term is split into two sub-phases:</p> <ol> <li>Declaring the terms to be imported</li> <li>Refreshing imports dynamically</li> </ol>"},{"location":"odk-workflows/UpdateImports/#declaring-terms-to-be-imported","title":"Declaring terms to be imported","text":"<p>There are three ways to declare terms that are to be imported from an external ontology. Choose the appropriate one for your particular scenario (all three can be used in parallel if need be):</p> <ol> <li>Prot\u00e9g\u00e9-based declaration</li> <li>Using term files</li> <li>Using the custom import template</li> </ol>"},{"location":"odk-workflows/UpdateImports/#protege-based-declaration","title":"Prot\u00e9g\u00e9-based declaration","text":"<p>This workflow is to be avoided, but may be appropriate if the editor does not have access to the ODK docker container.  This approach also applies to ontologies that use base module import approach.</p> <ol> <li>Open your ontology (edit file) in Prot\u00e9g\u00e9 (5.5+).</li> <li>Select 'owl:Thing'</li> <li>Add a new class as usual.</li> <li>Paste the full iri in the 'Name:' field, for example, http://purl.obolibrary.org/obo/CHEBI_50906.</li> <li>Click 'OK'</li> </ol> <p></p> <p>Now you can use this term for example to construct logical definitions. The next time the imports are refreshed (see how to refresh here), the metadata (labels, definitions, etc.) for this term are imported from the respective external source ontology and becomes visible in your ontology.</p>"},{"location":"odk-workflows/UpdateImports/#using-term-files","title":"Using term files","text":"<p>Every import has, by default a term file associated with it, which can be found in the imports directory. For example, if you have a GO import in <code>src/ontology/go_import.owl</code>, you will also have an associated term file <code>src/ontology/go_terms.txt</code>. You can add terms in there simply as a list:</p> <pre><code>GO:0008150\nGO:0008151\n</code></pre> <p>Now you can run the refresh imports workflow) and the two terms will be imported.</p>"},{"location":"odk-workflows/UpdateImports/#using-the-custom-import-template","title":"Using the custom import template","text":"<p>This workflow is appropriate if:</p> <ol> <li>You prefer to manage all your imported terms in a single file (rather than multiple files like in the \"Using term files\" workflow above).</li> <li>You wish to augment your imported ontologies with additional information. This requires a cautionary discussion.</li> </ol> <p>To enable this workflow, you add the following to your ODK config file (<code>src/ontology/hp-odk.yaml</code>), and update the repository:</p> <pre><code>use_custom_import_module: TRUE\n</code></pre> <p>Now you can manage your imported terms directly in the custom external terms template, which is located at <code>src/templates/external_import.owl</code>. Note that this file is a ROBOT template, and can, in principle, be extended to include any axioms you like. Before extending the template, however, read the following carefully.</p> <p>The main purpose of the custom import template is to enable the management off all terms to be imported in a centralised place. To enable that, you do not have to do anything other than maintaining the template. So if you, say currently import <code>APOLLO_SV:00000480</code>, and you wish to import <code>APOLLO_SV:00000532</code>, you simply add a row like this:</p> <pre><code>ID  Entity Type\nID  TYPE\nAPOLLO_SV:00000480  owl:Class\nAPOLLO_SV:00000532  owl:Class\n</code></pre> <p>When the imports are refreshed see imports refresh workflow, the term(s) will simply be imported from the configured ontologies.</p> <p>Now, if you wish to extend the Makefile (which is beyond these instructions) and add, say, synonyms to the imported terms, you can do that, but you need to (a) preserve the <code>ID</code> and <code>ENTITY</code> columns and (b) ensure that the ROBOT template is valid otherwise, see here.</p> <p>WARNING. Note that doing this is a widespread antipattern (see related issue). You should not change the axioms of terms that do not belong into your ontology unless necessary - such changes should always be pushed into the ontology where they belong. However, since people are doing it, whether the OBO Foundry likes it or not, at least using the custom imports module as described here localises the changes to a single simple template and ensures that none of the annotations added this way are merged into the base file.  </p>"},{"location":"odk-workflows/UpdateImports/#refresh-imports","title":"Refresh imports","text":"<p>If you want to refresh the import yourself (this may be necessary to pass the travis tests), and you have the ODK installed, you can do the following (using go as an example):</p> <p>First, you navigate in your terminal to the ontology directory (underneath src in your hpo root directory).  <pre><code>cd src/ontology\n</code></pre></p> <p>Then, you regenerate the import that will now include any new terms you have added. Note: You must have docker installed.</p> <pre><code>sh run.sh make PAT=false imports/go_import.owl -B\n</code></pre> <p>Since ODK 1.2.27, it is also possible to simply run the following, which is the same as the above:</p> <pre><code>sh run.sh make refresh-go\n</code></pre> <p>Note that in case you changed the defaults, you need to add <code>IMP=true</code> and/or <code>MIR=true</code> to the command below:</p> <pre><code>sh run.sh make IMP=true MIR=true PAT=false imports/go_import.owl -B\n</code></pre> <p>If you wish to skip refreshing the mirror, i.e. skip downloading the latest version of the source ontology for your import (e.g. <code>go.owl</code> for your go import) you can set <code>MIR=false</code> instead, which will do the exact same thing as the above, but is easier to remember:</p> <pre><code>sh run.sh make IMP=true MIR=false PAT=false imports/go_import.owl -B\n</code></pre>"},{"location":"odk-workflows/UpdateImports/#using-the-base-module-approach","title":"Using the Base Module approach","text":"<p>Since ODK 1.2.31, we support an entirely new approach to generate modules: Using base files. The idea is to only import axioms from ontologies that actually belong to it.  A base file is a subset of the ontology that only contains those axioms that nominally  belong there. In other words, the base file does not contain any axioms that belong to another ontology. An example would be this:</p> <p>Imagine this being the full Uberon ontology:</p> <pre><code>Axiom 1: BFO:123 SubClassOf BFO:124\nAxiom 1: UBERON:123 SubClassOf BFO:123\nAxiom 1: UBERON:124 SubClassOf UBERON 123\n</code></pre> <p>The base file is the set of all axioms that are about UBERON terms:</p> <pre><code>Axiom 1: UBERON:123 SubClassOf BFO:123\nAxiom 1: UBERON:124 SubClassOf UBERON 123\n</code></pre> <p>I.e.</p> <pre><code>Axiom 1: BFO:123 SubClassOf BFO:124\n</code></pre> <p>Gets removed.</p> <p>The base file pipeline is a bit more complex than the normal pipelines, because of the logical interactions between the imported ontologies. This is solved by _first  merging all mirrors into one huge file and then extracting one mega module from it.</p> <p>Example: Let's say we are importing terms from Uberon, GO and RO in our ontologies. When we use the base pipelines, we</p> <p>1) First obtain the base (usually by simply downloading it, but there is also an option now to create it with ROBOT) 2) We merge all base files into one big pile 3) Then we extract a single module <code>imports/merged_import.owl</code></p> <p>The first implementation of this pipeline is PATO, see https://github.com/pato-ontology/pato/blob/master/src/ontology/pato-odk.yaml.</p> <p>To check if your ontology uses this method, check src/ontology/hp-odk.yaml to see if <code>use_base_merging: TRUE</code> is declared under <code>import_group</code></p> <p>If your ontology uses Base Module approach, please use the following steps: </p> <p>First, add the term to be imported to the term file associated with it (see above \"Using term files\" section if this is not clear to you)</p> <p>Next, you navigate in your terminal to the ontology directory (underneath src in your hpo root directory).  <pre><code>cd src/ontology\n</code></pre></p> <p>Then refresh imports by running</p> <p><pre><code>sh run.sh make imports/merged_import.owl\n</code></pre> Note: if your mirrors are updated, you can run <code>sh run.sh make no-mirror-refresh-merged</code></p> <p>This requires quite a bit of memory on your local machine, so if you encounter an error, it might be a lack of memory on your computer. A solution would be to create a ticket in an issue tracker requesting for the term to be imported, and one of the local devs should pick this up and run the import for you.</p> <p>Lastly, restart Prot\u00e9g\u00e9, and the term should be imported in ready to be used.</p>"},{"location":"odk-workflows/components/","title":"Adding components to an ODK repo","text":"<p>For details on what components are, please see component section of repository file structure document.</p> <p>To add custom components to an ODK repo, please follow the following steps:</p> <p>1) Locate your odk yaml file and open it with your favourite text editor (src/ontology/hp-odk.yaml) 2) Search if there is already a component section to the yaml file, if not add it accordingly, adding the name of your component:</p> <pre><code>components:\n  products:\n    - filename: your-component-name.owl\n</code></pre> <p>3) Refresh your repo by running <code>sh run update_repo</code>. This will automatically (1) create a new file in <code>src/ontology/components/</code>, (2) update the <code>-edit</code> file so that it imports <code>http://purl.obolibrary.org/obo/hp/components/your-component-name.owl</code> (the IRI of your new component), and (3) update the XML catalog file (<code>src/ontology/catalog-v001.xml</code>) to redirect that IRI to the file in the <code>src/ontology/components</code> directory, so that the new component can be found by tools such as Prot\u00e9g\u00e9 or ROBOT, when they load the <code>-edit</code> file.</p> <p>If your component is to be generated by some automated process, add a goal in your custom Makefile (<code>src/ontology/hp.Makefile</code>) and make it perform any task needed to generate the component:</p> <pre><code>$(COMPONENTSDIR)/your-component-name.owl: $(SRC)\n    &lt;Insert here the code to produce the component&gt;\n</code></pre> <p>If the component is to be generated from a ROBOT template, the ODK can generate the appropriate code for you. For that, when adding the component fo the ODK configuration file (step 2 above), explicitly indicate that the component should be derived from template(s) and list the source templates:</p> <pre><code>components:\n  products:\n    - filename: your-component-name.owl\n      use_template: true\n      templates:\n        - template1.tsv\n        - template2.tsv\n</code></pre> <p>In this example, the component will be derived from the templates found in <code>src/templates/template1.tsv</code> and <code>src/templates/template2.tsv</code>. Initial empty templates will automatically be generated when the repository is refreshed (step 3).</p> <p>Likewise, the ODK can generate the required code for the case where the component is to be derived from SSSOM mappings:</p> <pre><code>components:\n  products:\n    - filename: your-component-name.owl\n      use_mappings: true\n      mappings:\n        - my-mappings.sssom.tsv\n</code></pre> <p>and for the case where the component is to be fetched from a remote resource:</p> <pre><code>components:\n  products:\n    - filename: your-component-name.owl\n      source: https://example.org/component-source.owl\n</code></pre>"},{"location":"workshops/","title":"HPO Workshops","text":"<p>The HPO has been a community project since its inception in 2008. We are indebted to all those who have made contributions of new terms, annotations, and other improvements. See the Community page for more information.</p> <p>There are many ways of contributing to the HPO project. One of the most important consists of community workshops, in which experts in a certain medical domain come together to review, revise, and extend specific areas of the HPO such as ophthalmology, mental disease, or immunology.</p>"},{"location":"workshops/#topics","title":"Topics","text":"<ul> <li>What is a good HPO term?</li> <li>Rules For Good HPO Structure</li> <li>What is the difference between a disease and a phenotypic feature?</li> <li>Synonyms</li> <li>Previous workshops</li> </ul>"},{"location":"workshops/annotations/","title":"Disease annotations","text":"<p>The HPO team is transitioning to GA4GH Phenopacket format for annotating cases and diseases. We have created the phenopacket store as a repository for individual-level information. We are working on the pyphetools package to streamline annotation of phenopackets.</p> <p>Our software for this application is in development. We will discuss current options during the workshop.</p>"},{"location":"workshops/annotations/#rarelink","title":"RareLink","text":"<p>RareLink is a new tool that enables efficient and accurate entry of HPO and other data related to rare disease medicine.</p> <p>RareLink is a tool for managing and processing rare disease data within the REDCap. RareLink aims to maximise the utility of REDCap by providing a comprehensive framework designed specifically for rare disease (RD) research and care. RareLink streamlines import of tabular data (e.g., Excel, relational database).</p> <p>RareLink additionally provides a preconfigured data collection sheets based on the RD-CDM and user guides for manual data capture to ensure precision and correctness of data captured. Further, RareLink defines guidelines for developing more specialised REDCap sheets around the RD-CDM so that the data captured can also be processed by our framework to generate FHIR resources and Phenopackets.</p> <p>RareLink is designed to be deployed and installed in a local REDCap instance. Using the guidelines provided, or using our preconfigured RareLink-REDCap and setting up the RareLink API, you can ensure that the data captured is compliant with the our framework to generate FHIR resources and Phenopackets.</p> <p>We will typically provide a short introduction to RareLink at HPO workshops.</p>"},{"location":"workshops/changes/","title":"HPO Updates and Change management","text":"<p>The HPO undergoes frequent updates and expansions. This page summarizes how we manage changes to the HPO.</p>"},{"location":"workshops/changes/#frequency-of-hpo-updatesreleases","title":"Frequency of HPO updates/releases","text":"<p>The HPO is released about 5 times each year. The cadence of releases is variable.  the releases page includes all releases made since 2017. </p>"},{"location":"workshops/changes/#what-happens-when-a-term-is-made-obsolete","title":"What happens when a term is made obsolete?","text":"<p>There are a few reasons that the HPO will make a term obsolete.</p> <ol> <li>Inadvertantly, two separate terms were created that are actually synonymous -- we therefore merge these terms by transfering all of the information from one term to the other and then making the former term obsolete.</li> <li>Domain experts review a term and decide the term is not accurate or useful.</li> </ol> <p>A major concern with obsoleting a term is that external users may have used the term to annotate a patient, and if we just removed the term without a trace, then the external user would essentially lose information. We therefore do several things to help external users, and we only obsolete a term if absolutely necessary. Term obsoletion was commonly required in the early years of the HPO project, but as the quality has grown, it is only rarely necessary now.</p> <p>The procedure that we perform is </p> <ol> <li>Take the id of the term that is to be obsoleted, and add is as 'has_alt_id' (alternate identifier) to the other term</li> <li>Add the label of the term that is to be obsoleted as a synonym (usually exact synonym) to the other term</li> <li>Transfer any other relevant information including especially alt ids, useful comments, database xrefs</li> <li>Transfer any subclasses of the term to be obsoleted to the new class</li> <li>Remove information such as logical definitions that does not need to be retained</li> <li>Add the annotation 'term replaced by' and indicate the primary id of the other term</li> <li>Add the annotation owl:deprecated with the literal value 'true'</li> </ol> <p>Software and databases should update annotations to an obsoleted term using the 'term replaced by' annotation.</p>"},{"location":"workshops/changes/#alternate-identifiers","title":"alternate identifiers","text":"<p>An alt_id is thus the identifier of a term that was merged into the current term. Please note that obsolete terms cannot have alt_ids, since this will cause obscure error messages. </p>"},{"location":"workshops/changes/#when-terms-are-updated-ie-same-id-different-term-can-the-relationship-in-the-hierarchy-also-change","title":"When terms are updated (i.e. same ID, different term), can the relationship in the hierarchy also change?","text":"<p>In general, the updated term will retain the position of one of the merged terms in the hierarchy. In rare cases, domain experts will recommend revising the hierarchy while merging terms. </p>"},{"location":"workshops/changes/#when-a-term-is-updated-can-the-meaning-of-the-term-significantly-change","title":"When a term is updated, can the meaning of the term  significantly change?","text":"<p>Terms are only updated in this way of the clinical meaning of the term is not changed (or if there is at most a trivial change).</p>"},{"location":"workshops/good_structure/","title":"Rules For Good HPO Structure","text":"<p>Creating a good HPO (see here) is not all we need to do. We also need to decide where to place the term in the HPO hierarchy. There are several rules of thumb that can help with this.</p>"},{"location":"workshops/good_structure/#true-path-rule","title":"True-Path Rule","text":"<p>The true path rule (also known as annotation propagation rule) states:</p>    If a term can be used to describe a patient then all parents of that term can be used to describe that patient.   <p></p> Iridescent posterior subcapsular cataract. Hierarchy for Iridescent posterior subcapsular cataract (HP:0007889).  <p>In this case, if a patient is diagnosed with  Iridescent posterior subcapsular cataract (HP:0007889), it is true that the patient can also be said to have Posterior subcapsular cataract (HP:0007787), because every Iridescent posterior subcapsular cataract is also a Posterior subcapsular cataract (i.e., Iridescent posterior subcapsular cataract is a specific kind of Posterior subcapsular cataract). </p> <p>Similarly, the patient can be said to have a Subcapsular cataract (HP:0000523) because every Posterior subcapsular cataract is also a Subcapsular cataract. The same thing is true of all of the ancesters, e.g., the patient can be said to have a  Cataract (HP:0000518) and  Abnormal lens morphology (HP:0000517) and so on up to the root of the ontology, Phenotypic abnormality (HP:0000118).</p>"},{"location":"workshops/good_structure/#when-is-the-true-path-rule-violated","title":"When is the true-path rule violated?","text":"<p>Consider the following example. Currently, in the HPO, Cataract (HP:0000518) is a subclass of  Abnormal lens morphology (HP:0000517). This is always true for reasons explained above. Let's say we decided to make  Cataract (HP:0000518) also be a subclass of Reduced visual acuity (HP:0007663) because individuals with cataract tend to have vision problems.</p> <p>This would violate the true-path rule, because it is not true that all individuals with cataract have reduced visual acuity. Rarely, visual acuity can be normal with certain kinds of congenital cataract. However, HPO-based software uses the true-path rule to infer that if a patient is explicitly annotated to a certain term, the patient is implicitly annotated to all of the ancestors of the term, which would not always be true in this example.</p>"},{"location":"workshops/good_structure/#avoid-bundled-terms","title":"Avoid bundled terms","text":"<p>Avoid creating terms that refer to multiple phenotypes that do not easily fit under a broader term.</p> <p>For example, a concept such as \"Bipolar disease I\" is not a good HPO term because it is a diagnostic term that refers to an individual with a history of at least one manic episode who displays the following characteristics:</p> Label Description A Distinct period of mood disturbance B Manic symptoms C Severe mood disturbance D Not attributable to a substance or other medical condition Table 1: Criteria for bipolar disease I.  <p>To specify a disease, it is preferable to use a term from a disease ontology such as Mondo.</p>"},{"location":"workshops/good_structure/#exceptions","title":"Exceptions","text":"<p>Many Mendelian diseases are characterized by a highly increased risk for certain diseases. For instance, individuals with Bardet-Biedl syndrome frequently have Diabetes mellitus (HP:0000819). Frequently, this is the only information that is available in medical publications (e.g., it would be noted that a person with BBS has diabetes, but the manifestations and time course of diabetes in that individual are not specified). For this reason, the HPO has a number of \"diagnostic\" terms. </p> <p>Also, in some cases, a medical history of a disease can be considered to be a phenotypic feature. For instance, infections following live vaccinations such as BCGosis HP:0020087  can be manifestations of some inborn errors of immunity.</p>"},{"location":"workshops/good_structure/#pie-rule","title":"Pie rule","text":"<p>The Pie Rule (also known as the Brie rule) states:</p>  The set of child terms of a given term should robustly cover the specific subclasses of the parent term, such that a parent term could always be replaced with a more specific child term.   <p></p> Pie rule. If a term has one or more subclasses, then ideally the subclasses should be about the same \"size\" and completely cover the pie.  <p>Consider, for instance, the term Abnormal cardiac septum morphology (HP:0001671).</p> <p></p> Abnormal cardiac septum morphology.  <p>Abnormal cardiac septum morphology has three subterms. On the HPO website, if you hover over the gray bars, you can see the number of descendent terms for each of them.</p> <ul> <li>Abnormal ventricular septum morphology (HP:0010438): 14 subterms, including specific terms such as Perimembranous ventricular septal defect HP:0011682.</li> <li>Abnormal atrial septum morphology (HP:0011994): 8 subterms, including specific terms such as Secundum atrial septal defect (HP:0001684)</li> <li>Atrioventricular canal defect (HP:0006695): 6 subterms, including specific terms such as Complete atrioventricular canal defect (HP:0001674).</li> </ul> <p>Thus, here the HPO attempts to cover all of the specific kinds of Abnormal cardiac septum morphology. The three main subclasses are covered and all three have roughly the same number of terms. It would be a mistake, in contrast, if Abnormal cardiac septum morphology (HP:0001671) had the subclasses  Abnormal ventricular septum morphology (HP:0010438), Abnormal atrial septum morphology (HP:0011994), and then Complete atrioventricular canal defect (HP:0001674), Partial atrioventricular canal defect (HP:0011577), and so on for the other four child terms of Atrioventricular canal defect (HP:0006695), because the former two terms have a different granularity (they are grouping terms) than the latter (they are specific terms).</p>"},{"location":"workshops/good_structure/#the-5-o-clock-rule","title":"The 5 o-clock rule","text":"<p>This rule states that </p>  Terms should be easy to find by walking down the hierarchy. That is, a clinician should be able to find the right term at 5:00 pm on a Friday after a long work week.  <p>It is of course hard to precisely define this rule, but basically the hierarchy of the HPO should reflect, to the extent possible, current clinical thinking and not ontological abstractions.</p>"},{"location":"workshops/good_structure/#why-are-these-rules-important","title":"Why are these rules important?","text":"<p>Consider the following (made-up) example. At first glance, it may appear correct - after all, patients with depressed mood may lose weight, be tearful, and have sleep disturbances.</p> <p></p> Example: depressed mood.  <p>However, note that these are not actually subclass relations. Instead, they are has-phenotype relations in the sense that a patient with depressed mood often has the three phenotypic features in question. However, not every patient with sleep distrubance has depressed mood. Other causes include sleep apnea, restless Legs Syndrome, narcolepsy, chronic pain, certain medications, caffeine,  alcohol, environmental factors such as loud noises, thyroid conditions, parkinson disease, and many others.</p> <p>Therefore, if we encoded this relation in the HPO (which only uses subclass relations), then HPO-aware computer programs would falsely conclude that every patient with any one of the above diseases who happened to have a sleep disturbance also has depressed mood. While this may be true for some, it is not true in general, and this would lead to erroneous results. </p> <p>The structure of the HPO is designed to follow the above rules to ensure accuracy of computational algorithms that use HPO.</p>"},{"location":"workshops/good_term/","title":"What is a Good HPO Term?","text":""},{"location":"workshops/good_term/#new-term-requests","title":"New term requests","text":"<p>The simplest way to contribute to the HPO is to make a new term request on our issue tracker on Github. The following text is intended to serve as a guide for anyone who would like to contribute to the HPO project by making new term requests.</p>"},{"location":"workshops/good_term/#does-the-term-you-are-looking-for-already-exist","title":"Does the term you are looking for already exist?","text":"<p>First, please look at the current HPO and check whether the term is already there. Use the browser on this website.</p>"},{"location":"workshops/good_term/#is-the-term-you-are-looking-for-a-synonym-of-an-existing-term","title":"Is the term you are looking for a synonym of an existing term?","text":"<p>If you do not immediately find the term you are looking for, please look for synonyms. One way of doing this is to go to a likely parent of the term and peruse all of the children to spot a likely synonym. For instance, if you are looking for a term entitled Defect in the atrial septum and do not find it, go to the term Abnormal cardiac atrium morphology (HP:0005120). and look through all of the children. With some luck you will find the term  Atrial septal defect (HP:0001631) and recognize that Defect in the atrial septum is listed as a synonym of Atrial septal defect (HP:0001631).</p>"},{"location":"workshops/good_term/#bundled-terms","title":"Bundled terms","text":"<p>If you find a description in a publication such as \"Sparse eyebrows and eyelashes\", note that the description is referring to two separate phenotypic features. The HPO would encode this using two different terms, Sparse eyebrow (HP:0045075) and  Sparse eyelashes (HP:0000653). The idea is that one HPO term should refer to an atomic phenotypic abnormality rather than to a collection of abnormalities observed in an individual patient. Please debundle the description and proceed as described above. This is a central tenet of Deep phenotyping.</p>"},{"location":"workshops/good_term/#anatomy-of-a-good-term-suggestion","title":"Anatomy of a good term suggestion","text":"<p>A good term request provides the information shown in Table 1. Please use our GitHub issue tracker, choosing the \u201cNew Term\u201d template.</p> Item Example Label Corneal guttata Definition Corneal guttata are droplet-like accumulations of non-banded collagen on the posterior surface of Descemet's membrane. The presence of focal thickenings of Descemet's membrane histologically named guttae. Cornea guttata can be easily diagnosed in vivo and ex vivo by means of specular microscopy as it gives dark areas where no endothelial cells are visible. Comment Corneal guttata are often observed in elderly people and are known to be associated with Fuchs corneal endothelial dystrophy, and also with trauma, congenital glaucoma, and macular dystrophy. Synonyms Corneal endothelial guttata, Corneal guttae Parent term Abnormal Descemet membrane morphology [HP:0011490](https://hpo.jax.org/browse/term/HP:0011490){:target=\"\\_blank\"} Disease association Optionally, provide information about diseases characterized by this term and if available PubMed identifiers (PMIDs). Table 1: Components of a complete and well-structured new term request."},{"location":"workshops/good_term/#how-to-suggest-new-disease-annotations","title":"How to suggest new disease annotations","text":"<p>We welcome suggestions for novel disease annotations (HPOAs) to add to HPO. These can be made by submitting a ticket to the HPO tracker with the information shown in Table 2. Please use our GitHub issue tracker, choosing the \u201cNew Annotation\u201d template.</p> Item Example Disease ID OMIM:265380 Disease Name Alveolar capillary dysplasia with misalignment of pulmonary veins HPO ID HP:0001734 HPO Term Name Annular pancreas Frequency 2/14 Onset Congenital onset (use terms from the HPO Onset hierarchy) PMID PMID:19500772 Comment Any other information or context Table 2: Components of a complete and well-structured new disease annotation request."},{"location":"workshops/practical/","title":"Workshop procedure","text":"<p>Each HPO workshop is a little different, but in general, we plan for one or two days. Usually, the schedule of a workshop resembles the following plan.</p> <ol> <li>Lecture. Review of the HPO project and its applications in genomic diagnostics and translational research. (60 min)</li> <li>Review of the rules for making new HPO terms (see the other pages in this section). (30min)</li> <li>Discussion and demonstration of tools for the workshop. Depending on the setting, we have used Google spreadsheets, online forms (airtable), or pencil and paper to capture the suggestions of workshop participants. This is because different projects and different groups are at different stages and have distinct goals. </li> <li>Group session. We typically start with a session involving the entire group in which we review a small section of the HPO and create 3-5 terms together, so that participants gain confidence in working with the HPO.</li> <li>Breakout sessions. We typically ask groups to identify subtopics for smaller breakout groups (of 3-10 members). These groups will review the relevant part of the HPO in depth, creating new terms, revising and improving existing terms and structure.</li> <li>Report-back. The breakout groups report to the group as a whole, and if necessary, revisit the terms created in the breakouts according to suggestions of the group.</li> <li>Hand-off. The breakout groups usually define a group leader who coordinates the remaining work with the HPO team. For instance, the HPO term will plan to add the new terms to the official HPO files using either scripts or adding some terms manually using tools such as Protege.</li> </ol>"},{"location":"workshops/practical/#getting-started","title":"Getting started","text":"<p>In our experience, it takes first-time participants a few hours to get the hang of things. This is OK, and the HPO project is insensely grateful to its many contributors for taking the time to help us improve the resource -- we will take enough time during the workshops to discuss questions and doubts.</p> <p>This section provides an example of the kind of work you will be doing.</p> <p></p> Esophageal atresia. Hierarchy for Iridescent posterior subcapsular cataract (HP:0007889).  <p>At the time of this writing (Nov. 24, 2024), the term Esophageal atresia (HP:0002032) has only one child term, Proximal esophageal atresia (HP:0004403). The latter term has no definition, no citation to an article in PubMed, and no synonyms. Therefore, several rules described in the sections on good HPO structure and good HPO term content are violated, and so there is ample opportunity to improve this part of the HPO. </p> <p>When you are considering whether a term needs work, reflect on the following issues.</p> <ol> <li>Do the children of the term include all relevant concepts? Is the granularity of the child terms similar? (Pie rule)</li> <li>Do you need to create a new term? (also Pie rule)</li> <li>Is the structure (or relationships between terms) correct? (True path rule)</li> <li>Do you need to add more synonyms?</li> <li>Could the label or definition of a term use some added clarification? (5 o'clock rule)</li> </ol> <p>In this case, here are some of the things we could do.</p>"},{"location":"workshops/practical/#add-a-definition","title":"Add a definition","text":"<p>We can search in PubMed using a search term such as \"esophageal atresia\"[title]. If we search in Google, it is good to search on \"esophageal atresia\" AND PMID in order to find an article listed in PubMed which we can cite in the HPO.</p> <p>One of the articles that this search turned up was Sfeir R, et al. (2013) Epidemiology of esophageal atresia. Dis Esophagus 26(4):354-5. We can extract the first two sentence from the abstract of this article for our definition:</p>  Esophageal atresia (EA) is a rare congenital malformation consisting of a lack of continuity between the upper and lower esophageal pouches, frequently associated with tracheoesophageal fistula.  <p>It is acceptable to use large-language models as a part of the search process, but we ask that all definitions are derived from a citable source and that a human expert has vetted the source and the definition.</p>"},{"location":"workshops/practical/#add-synonyms","title":"Add synonyms","text":"<p>Synonyms are useful because they help users more easily find HPO terms and they are also used by most text-mining tools that identify HPO terms in texts. This is an application where LLMs can be very useful if the answers are checked by an expert. In this case, GPT suggested \"Esophageal agenesis\", which is not a synonym (agenesis means complete absence, while atresia means that the esophagus ends in a blind pouch instead of connecting to the stomach). However, \"Esophagus atresia\" is correct.</p>"},{"location":"workshops/practical/#add-related-terms","title":"Add related terms","text":"<p>We may decide to add more child terms to Esophageal atresia (HP:0002032). It is often good to search for information about classifications of defects or abnormalities. In this case, we find a review article on the anomaly: Spitz L (2007) Oesophageal atresia. Orphanet J Rare Dis. 2:24.</p> <p>In our workshops, often participants will be aware of the classifications most used in their field and are able to specify the key citations. We ask participants to prepare themselves for our workshop by identifying analogous classifications in their field that are relevant for the topics to be worked on.</p> <p>Here, we see that there are several common anatomical types of oesophageal atresia. </p> <ul> <li>Esophageal atresia with distal tracheooesophageal fistula</li> <li>Esophageal atresia without tracheooesophageal fistula </li> <li>H-type tracheooesophageal fistula (4%)</li> </ul> <p>The first category is the most common variety in which the proximal oesophagus, which is dilated, and the muscular wall thickened ends blindly in the superior mediastinum at about the level of the third or fourth thoracic vertebra. We may need to relabel this terms to reflect this, i.e., to change the label of  Proximal esophageal atresia (HP:0004403) to Esophageal atresia with distal tracheooesophageal fistula. If we are not sure if these are refering to the same medical entity, we would leave the original term and add a corresponding definition. Typically, there is group discussion about such issues.</p>"},{"location":"workshops/practical/#disease-annotations","title":"Disease annotations","text":"<p>Ideally, we would also collect information about case or cohort reports that describe Mendelian diseases that can be characterized by Esophageal atresia. We can start by looking at the Disease annotations tab of the correpsonding page on the HPO website: Esophageal atresia (HP:0002032). If we know of a disease that has this association but is not listed there, we can add the information by creating an issue on the GitHub tracker or directly during the workshop.</p>"},{"location":"workshops/synonyms/","title":"Synonyms","text":"<p>Many terms in the HPO have synonyms. Synonyms can help to find HPO terms on the website and caqn also be used by text-mining software to increase sensitivity of extracting HPO terms from medical texts. There are several different kinds of synonyms.</p> <ul> <li> <p>Exact: can be used interchangeably. One synonym can replace the other synonym. a. e.g. Focal myoclonic seizure and Partial myoclonic seizure</p> </li> <li> <p>Broad: more general term that includes the feature of the primary term, but may include other features a. E.g. left ventricular hypertrophy (thickening of left ventricle) and cardiac hypertrophy (thickening of any cardiac muscle, including left ventricle)</p> </li> <li> <p>Narrow: a more specific subtype of a general term a. E.g. congestive heart failure (general term describing inability of heart to pump effectively) and left-sided heart failure (specific type of failure to pump)</p> </li> <li> <p>Related: Conceptually related but not exactly interchangeable. One synonym does not replace the other a. E.g. Myocardial infarction and Coronary artery disease (underlying condition that may lead to (but not necessarily) a myocardial infarction</p> </li> <li> <p>Lay-person: used by general public. Often - exact synonyms and lay-person synonyms are the same, such as Myocardial infarction and heart attack or Hypertension and high blood pressure</p> </li> </ul>"}]}